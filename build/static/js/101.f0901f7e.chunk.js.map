{"version":3,"sources":["views/subscription/admin/all-subscription/add-class-subscription/index.js","views/subscription/admin/all-subscription/onlineSubscription/index.js"],"names":["TYPE_DATA","id","status","PAYMENT_MODE","validationSchema","yup","typeId","required","planOptionId","profileId","paymentMode","amount","CourseSubscription","props","isOpen","setOpen","classes","useStyles","dispatch","useDispatch","methods","useSelector","state","school","schoolList","useForm","mode","resolver","yupResolver","defaultValues","type","transactionId","reset","handleSubmit","handlePopupClose","watch","useEffect","getSchoolList","_jsx","children","_jsxs","Dialog","open","paper","dialog","DialogTitle","className","dialogTitle","dialogTitleChild","Typography","style","fontSize","Link","to","onClick","CloseIcon","closeIcon","FormProvider","onSubmit","data","payload","addSubscription","getAllSubscription","PerfectScrollbar","ScrollHeight","DialogContent","Grid","container","rowSpacing","item","xs","mandatory","RHFSelect","name","label","disabled","value","RHFTextField","map","index","Divider","marginTop","DialogActions","dialogAction","Button","variant","color","buttonCancel","buttonSubmit","StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","OnlineSubscription","useUserRole","roleList","loggedUserProfile","userProfile","useTheme","history","useHistory","_useState","useState","_useState2","_slicedToArray","setValue","_useState3","_useState4","openAddDeliveryPlans","setOpenAddDeliveryPlans","_useState5","_useState6","page","setPage","_useState7","_useState8","rowsPerPage","setRowsPerPage","_useState9","_useState10","isPlanUpdateData","setPlanUpdateData","allSubscription","subscriptions","newData","content","getAllOnlineSubscription","_Fragment","MainCard","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","spacing","display","justifyContent","sm","md","OutlinedInput","searchControl","onChange","e","target","placeholder","startAdornment","InputAdornment","position","IconSearch","stroke","size","btn","role","btnAddDeliveryPlan","AddIcon","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","TableBody","slice","row","success","main","warning","dark","Tooltip","title","IconButton","push","concat","VisibilityIcon","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","sx","marginBottom","isEditData"],"mappings":"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","file":"static/js/101.f0901f7e.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '../../../../DialogStyles';\nimport { addSubscription, getAllSubscription } from '../../../../../store/actions/SubscriptionActions';\nimport { getSchoolList } from '../../../../../store/actions/SchoolActions';\nimport { FormProvider, RHFTextField, RHFSelect } from '../../../../../components/hook-form';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography, Grid, Link, Divider } from '@material-ui/core';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst TYPE_DATA = [\n    { id: 0, status: 'ONLINE_COURSE' }\n    // { id: 1, status: 'ONLINE_COURSE ' }\n];\n\nconst PAYMENT_MODE = [\n    { id: 0, status: 'ONLINE' },\n    { id: 1, status: 'CASH' }\n];\n\nconst validationSchema = yup.object({\n    //type: yup.string().required('Type is required'),\n    typeId: yup.string().required('Type Id is required'),\n    planOptionId: yup.string().required('Plan option id is required'),\n    profileId: yup.string().required('Profile Id is required'),\n    paymentMode: yup.string().required('Payment mode is required'),\n    amount: yup.string().required('Amount is required')\n});\n\nexport default function CourseSubscription(props) {\n    const { isOpen, setOpen } = props;\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { schoolList } = useSelector((state) => state?.school);\n    const schoolLists = schoolList;\n\n    const initialValues = {\n        type: 'ONLINE_COURSE',\n        typeId: '',\n        planOptionId: '',\n        profileId: '',\n        paymentMode: '',\n        amount: '',\n        transactionId: ''\n    };\n    const methods = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(validationSchema),\n        defaultValues: initialValues\n    });\n    const { reset, handleSubmit, watch } = methods;\n    const hide = watch('type');\n\n    const handlePopupClose = () => {\n        setOpen(false);\n        reset();\n    };\n    const onSubmit = (data) => {\n        const payload = {\n            type: data?.type,\n            typeId: data?.typeId,\n            planOptionId: data?.planOptionId,\n            profileId: data?.profileId,\n            paymentMode: data?.paymentMode,\n            amount: data?.amount,\n            transactionId: data?.transactionId\n        };\n\n        dispatch(\n            addSubscription(payload, () => {\n                dispatch(getAllSubscription());\n                handlePopupClose();\n            })\n        );\n    };\n\n    useEffect(() => {\n        dispatch(getSchoolList());\n    }, []);\n\n    return (\n        <div>\n            <Dialog open={isOpen} classes={{ paper: classes.dialog }}>\n                <DialogTitle className={classes.dialogTitle}>\n                    <div className={classes.dialogTitleChild}>\n                        <Typography style={{ fontSize: '20px' }}> Add Subscription </Typography>\n                        <Link to=\"#\" onClick={handlePopupClose}>\n                            <CloseIcon className={classes.closeIcon} />\n                        </Link>\n                    </div>\n                </DialogTitle>\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n                    <PerfectScrollbar className={classes.ScrollHeight}>\n                        <DialogContent>\n                            <Grid container rowSpacing={2}>\n                                <Grid item xs={12}>\n                                    <label>\n                                        Type <span className={classes.mandatory}>*</span>\n                                    </label>\n                                    <RHFSelect name=\"type\" label=\"\" disabled>\n                                        {/* <option value=\"\">Select Type</option> */}\n                                        {/* {TYPE_DATA?.map((item, index) => (\n                                            <option key={index} value={item?.status}>\n                                                {item?.status}\n                                            </option>\n                                        ))} */}\n                                        <option value={TYPE_DATA[0].status}> {TYPE_DATA[0].status} </option>\n                                    </RHFSelect>\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <label>\n                                        Type Id <span className={classes.mandatory}>*</span>\n                                    </label>\n                                    <RHFTextField name=\"typeId\" />\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <label>\n                                        Plan Option Id<span className={classes.mandatory}>*</span>\n                                    </label>\n                                    <RHFTextField name=\"planOptionId\" />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <label>\n                                        Profile Id<span className={classes.mandatory}>*</span>\n                                    </label>\n                                    <RHFTextField name=\"profileId\" />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <label>\n                                        Payment Mode<span className={classes.mandatory}>*</span>\n                                    </label>\n                                    <RHFSelect name=\"status\" label=\"\">\n                                        {PAYMENT_MODE?.map((item, index) => (\n                                            <option key={index} value={item?.status}>\n                                                {item?.status}\n                                            </option>\n                                        ))}\n                                    </RHFSelect>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <label>\n                                        Amount<span className={classes.mandatory}>*</span>\n                                    </label>\n                                    <RHFTextField name=\"amount\" type=\"number\" />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <label>Transaction Id</label>\n                                    <RHFTextField name=\"transactionId\" />\n                                </Grid>\n                            </Grid>\n                        </DialogContent>\n                    </PerfectScrollbar>\n                    <Divider style={{ marginTop: 15 }} />\n                    <DialogActions className={classes.dialogAction}>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonCancel} onClick={handlePopupClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"contained\" type=\"submit\" className={classes.buttonSubmit}>\n                            Add\n                        </Button>\n                    </DialogActions>\n                </FormProvider>\n            </Dialog>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllSubscription } from '../../../../../store/actions/SubscriptionActions';\nimport { getAllOnlineSubscription } from '../../../../../store/actions/SubscriptionActions';\nimport MainCard from '../../../../../ui-component/cards/MainCard';\nimport { withStyles, useTheme } from '@material-ui/styles';\nimport {\n    Grid,\n    Button,\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Typography,\n    Tooltip\n} from '@material-ui/core';\nimport { IconSearch } from '@tabler/icons';\nimport SubjectIcon from '@material-ui/icons/Subject';\n//import AddSubscription from '../add-subscription';\nimport CourseSubscription from '../add-class-subscription';\nimport AddIcon from '@material-ui/icons/Add';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport { useHistory } from 'react-router-dom';\nimport useStyles from '../../../../ViewTableStyles';\nimport useUserRole from '../../../../../hooks/useUserRole';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function OnlineSubscription() {\n    const classes = useStyles();\n    useUserRole({ roleList: ['ADMIN', 'SCHOOL_ADMIN','SUPER_ADMIN'] });\n    const { loggedUserProfile } = useSelector((state) => state?.userProfile);\n    const dispatch = useDispatch();\n    const theme = useTheme();\n    const history = useHistory();\n    const [value, setValue] = useState('');\n    const [openAddDeliveryPlans, setOpenAddDeliveryPlans] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [isPlanUpdateData, setPlanUpdateData] = useState(null);\n    const { allSubscription } = useSelector((state) => state?.subscriptions);\n    const newData = allSubscription?.content;\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleViewPlans = (id) => {\n        history.push(`subscription/${id}`);\n    };\n    const handleDeliveryPlan = (id) => {\n        history.push(`orders/delivery-plan/${id}`);\n    };\n\n    const handlePlans = (data) => {\n        setOpenAddDeliveryPlans(true);\n        setPlanUpdateData(data);\n    };\n\n    useEffect(() => {\n        dispatch(getAllOnlineSubscription());\n    }, []);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; Class Subscriptions </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid container spacing={3} style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div>\n                                <OutlinedInput\n                                    className={classes.searchControl}\n                                    id=\"input-search-header\"\n                                    value={value}\n                                    onChange={(e) => setValue(e.target.value)}\n                                    placeholder=\"Search\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\">\n                                            <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div className={classes.btn}>\n                                {(loggedUserProfile?.role === 'ADMIN' || loggedUserProfile?.role === 'SUPER_ADMIN') && (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => {\n                                            setOpenAddDeliveryPlans(true);\n                                            setPlanUpdateData(null);\n                                        }}\n                                        className={classes.btnAddDeliveryPlan}\n                                    >\n                                        <AddIcon /> Subscription\n                                    </Button>\n                                )}\n                            </div>\n                        </Grid>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell> Type </TableCell>\n                                    <TableCell> Payment Mode </TableCell>\n                                    <TableCell align=\"center\"> Amount </TableCell>\n                                    <TableCell align=\"center\"> Transaction Id</TableCell>\n                                    <TableCell align=\"center\"> Status </TableCell>\n                                    <TableCell align=\"right\"> Actions </TableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {!newData ? (\n                                <caption style={{ textAlign: 'center' }}>Sorry! No data available</caption>\n                            ) : (\n                                <TableBody>\n                                    {newData?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                                        <StyledTableRow key={row.id}>\n                                            <TableCell>{row?.type}</TableCell>\n                                            <TableCell>{row?.paymentMode}</TableCell>\n                                            <TableCell align=\"center\">{row?.amount}</TableCell>\n                                            <TableCell align=\"center\">{row?.transactionId}</TableCell>\n                                            <TableCell align=\"center\">\n                                                <Typography\n                                                    className={classes.status}\n                                                    style={{\n                                                        backgroundColor:\n                                                            (row?.status === 'ACTIVE' && theme.palette.success.main) ||\n                                                            (row?.status === 'INACTIVE' && theme.palette.warning.dark)\n                                                    }}\n                                                >\n                                                    {row?.status}\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title=\"View Subscription\">\n                                                    <IconButton onClick={() => handleViewPlans(row.id)}>\n                                                        <VisibilityIcon color=\"primary\" style={{ cursor: 'pointer' }} />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </TableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[10, 15, 25]}\n                        component=\"div\"\n                        count={newData?.length || 0}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n                {openAddDeliveryPlans && (\n                    <CourseSubscription isOpen={openAddDeliveryPlans} setOpen={setOpenAddDeliveryPlans} isEditData={isPlanUpdateData} />\n                )}\n            </MainCard>\n        </>\n    );\n}\n"],"sourceRoot":""}