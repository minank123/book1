{"version":3,"sources":["views/students/orders/all-orders/index.js"],"names":["StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","useStyle","makeStyles","containerStyle","maxWidth","justifyContent","StudentAllOrders","_ref","_newData$slice","active","classes","useStyles","classes1","history","useHistory","useUserRole","roleList","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","_useState4","rowsPerPage","setRowsPerPage","pid","useSelector","state","login","data","Cookies","get","profileOrderData","order","newData","content","useEffect","getProfileOrder","_jsx","_Fragment","children","Container","className","Grid","container","spacing","_jsxs","item","xs","sm","Typography","variant","Divider","style","marginTop","marginBottom","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","length","TableBody","slice","map","row","index","id","totalBooks","deliveryDate","status","IconButton","cursor","onClick","push","concat","handleViewOrder","VisibilityIcon","textAlign","TablePagination","rowsPerPageOptions","component","count","totalElements","onPageChange","event","newPage","onRowsPerPageChange","target","value","sx"],"mappings":"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","file":"static/js/100.b1588881.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport {\n    Box,\n    IconButton,\n    Grid,\n    Typography,\n    Button,\n    Divider,\n    Container,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TablePagination\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport { useParams } from 'react-router-dom';\nimport { getProfileOrder } from '../../../../store/actions/OrderActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '../../../ViewTableStyles';\nimport Cookies from 'js-cookie';\nimport useUserRole from '../../../../hooks/useUserRole';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nconst useStyle = makeStyles((theme) => ({\n    containerStyle: {\n        maxWidth: '100%',\n        justifyContent: 'center'\n    }\n}));\n\nexport default function StudentAllOrders({ active }) {\n    const classes = useStyles();\n    const classes1 = useStyle();\n\n    const history = useHistory();\n    useUserRole({ roleList: ['STUDENT'] });\n    const dispatch = useDispatch();\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const { data } = useSelector((state) => state?.login);\n\n    const pid = Cookies.get('profileId');\n    const { profileOrderData } = useSelector((state) => state?.order);\n    const newData = profileOrderData?.content;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        //setPage(0);\n    };\n\n    const handleViewOrder = (data) => {\n        // setOrderId(id);\n        // dispatch(getProfileOrder(id));\n        history.push(`/order/${data}`);\n    };\n\n    useEffect(() => {\n        dispatch(getProfileOrder(pid, page + 1, rowsPerPage));\n    }, [page, rowsPerPage]);\n\n    return (\n        <>\n            {active === 'FourthCard' && (\n                <Container className={classes1.containerStyle}>\n                    <Grid container spacing={4}>\n                        <Grid item xs={12} sm={12}>\n                            <Typography variant=\"h3\"> Orders </Typography>\n                            <Divider style={{ marginTop: 10, marginBottom: 30 }} />\n                            <TableContainer className={classes.tableContainer}>\n                                <Table className={classes.table} aria-label=\"simple table\">\n                                    <TableHead className={classes.tableHeaderCell}>\n                                        <StyledTableRow>\n                                            <TableCell> Order Id </TableCell>\n                                            <TableCell align=\"center\"> Total Books </TableCell>\n                                            <TableCell> Delivery Date </TableCell>\n                                            <TableCell> Status </TableCell>\n                                            <TableCell align=\"right\"> Action </TableCell>\n                                        </StyledTableRow>\n                                    </TableHead>\n                                    {!newData || newData.length === 0 ? (\n                                        <caption style={{ textAlign: 'center' }}> Sorry! No data available </caption>\n                                    ) : (\n                                        <TableBody>\n                                            {newData?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)?.map((row, index) => (\n                                                <StyledTableRow key={index}>\n                                                    <TableCell> {row?.id} </TableCell>\n                                                    <TableCell align=\"center\"> {row?.totalBooks} </TableCell>\n                                                    <TableCell> {row?.deliveryDate} </TableCell>\n                                                    <TableCell> {row?.status} </TableCell>\n\n                                                    <TableCell align=\"right\">\n                                                        <IconButton style={{ cursor: 'pointer' }} onClick={() => handleViewOrder(row?.id)}>\n                                                            <VisibilityIcon />\n                                                        </IconButton>\n                                                    </TableCell>\n                                                </StyledTableRow>\n                                            ))}\n                                        </TableBody>\n                                    )}\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                rowsPerPageOptions={[10, 15, 25]}\n                                component=\"div\"\n                                count={profileOrderData?.totalElements || 0}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={handleChangePage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                                sx={{\n                                    '.MuiTablePagination-displayedRows': {\n                                        marginBottom: 0\n                                    },\n                                    '.MuiTablePagination-selectLabel': {\n                                        marginBottom: 0\n                                    }\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Container>\n            )}\n        </>\n    );\n}\n"],"sourceRoot":""}