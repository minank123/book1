{"version":3,"sources":["store/actions/DiscountActions/index.js","views/discounts/add-discount/index.js","views/discounts/index.js"],"names":["getAllDiscountError","error","type","GET_ALL_DISCOUNT_ERROR","addDiscount","payload","successCB","dispatch","http","process","then","res","setMessage","message","catch","err","_err$data","console","log","data","updateDiscount","id","concat","_err$data2","getAllDiscount","searchData","arguments","length","undefined","GET_ALL_DISCOUNT_START","GET_ALL_DISCOUNT_SUCCESS","getAllDiscountSuccess","allDiscounts","LEVEL_ITEMS","status","TYPE_ITEMS","validationSchema","yup","code","required","trim","description","levelType","maxLimitPerUserProfile","value","minAmount","startDate","endDate","AddDiscounts","props","openAddDiscounts","setOpenAddDiscounts","isEditData","allModule","allPlans","classes","useStyles","useDispatch","_useState","useState","_useState2","_slicedToArray","isLoading","getSearchedProfileData","useSelector","state","addUser","_useState3","_useState4","allUsers","setAllUSers","_useState5","_useState6","_useState7","_useState8","handleUser","formInitialSchema","levelTypeIds","methods","useForm","mode","resolver","yupResolver","defaultValues","reset","handleSubmit","hide","watch","handlePopupClose","useEffect","result","filter","o1","_isEditData$levelType","includes","userId","_isEditData$levelType2","_isEditData$levelType3","_jsxs","children","Dialog","open","maxWidth","_jsx","DialogTitle","className","dialogTitle","dialogTitleChild","Typography","style","fontSize","Link","to","onClick","CloseIcon","closeIcon","FormProvider","onSubmit","_allUsers$filter","_allUsers$filter2","_allUsers$filter3","arr","map","el","push","x","payloadArray","payloadarr","payloadarr1","DialogContent","Grid","container","item","xs","spacing","sm","mandatory","RHFTextField","name","placeholder","textField","autoFocus","RHFSelect","label","index","_Fragment","Autocomplete","multiple","options","getOptionLabel","option","emailFirstNameLastName","filterSelectedOptions","renderInput","params","TextField","_objectSpread","onChange","event","newValue","title","Divider","marginTop","DialogActions","dialogAction","Button","variant","color","buttonCancel","buttonSubmit","loader","CircularProgressLoader","StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","CouponDiscount","_newData$slice","useUserRole","roleList","setValue","page","setPage","rowsPerPage","setRowsPerPage","_useState9","_useState10","isDiscountUpdateData","setDiscountUpdateData","discount","newData","content","_useState11","_useState12","setAllModules","_useState13","_useState14","setAllPlans","getAllModule","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","axios","get","stop","apply","getAllPlans","_ref2","_callee2","_context2","userProfileSearch","MainCard","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","display","justifyContent","md","OutlinedInput","searchControl","e","target","startAdornment","InputAdornment","position","IconSearch","stroke","size","btn","btnAdd","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","width","TableBody","slice","row","Tooltip","IconButton","mid","EditIcon","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","onPageChange","newPage","onRowsPerPageChange","sx","marginBottom"],"mappings":"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","file":"static/js/88.3dad07d3.chunk.js","sourcesContent":["import { http } from '../../../utils/http';\nimport { setMessage } from '../MessageActions';\nimport {\n    GET_ALL_DISCOUNT_START,\n    GET_ALL_DISCOUNT_SUCCESS,\n    GET_ALL_DISCOUNT_ERROR,\n    GET_DISCOUNT_START,\n    GET_DISCOUNT_SUCCESS,\n    GET_DISCOUNT_ERROR\n} from '../../constants';\n\nconst getAllDiscountStart = () => {\n    return { type: GET_ALL_DISCOUNT_START };\n};\nconst getAllDiscountSuccess = (payload) => {\n    return { type: GET_ALL_DISCOUNT_SUCCESS, payload };\n};\nconst getAllDiscountError = (error) => {\n    return { type: GET_ALL_DISCOUNT_ERROR, error };\n};\n\nconst getDiscountStart = () => {\n    return { type: GET_DISCOUNT_START };\n};\nconst getDiscountSuccess = (payload) => {\n    return { type: GET_DISCOUNT_SUCCESS, payload };\n};\nconst getDiscountError = (error) => {\n    return { type: GET_DISCOUNT_ERROR, error };\n};\n\nconst addDiscount = (payload, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'POST', `subscriptions-service/discount`, payload, true)\n            .then((res) => {\n                if (res) {\n                    dispatch(setMessage(res?.message));\n                    successCB && successCB(res);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(setMessage(err?.data?.message));\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst updateDiscount = (payload, id, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'PUT', `subscriptions-service/discount/${id}`, payload, true)\n            .then((res) => {\n                if (res) {\n                    dispatch(setMessage(res?.message));\n                    successCB && successCB(res);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(setMessage(err?.data?.message));\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst getDiscount = (id) => (dispatch) => {\n    dispatch(getDiscountStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'GET', `subscriptions-service/discount/${id}`, true)\n            .then((res) => {\n                const payload = {\n                    getDiscountData: res\n                };\n                dispatch(getDiscountSuccess(payload));\n            })\n            .catch((err) => {\n                dispatch(getDiscountError(err));\n                dispatch(setMessage(err?.message));\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst getAllDiscount =\n    (searchData = '') =>\n    (dispatch) => {\n        dispatch(getAllDiscountStart());\n        try {\n            http(\n                process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS,\n                'GET',\n                `subscriptions-service/discount?searchKey=${searchData}&pageNumber=1&pageSize=20`,\n                true\n            )\n                .then((res) => {\n                    const payload = {\n                        allDiscounts: res\n                    };\n                    dispatch(getAllDiscountSuccess(payload));\n                })\n                .catch((err) => {\n                    dispatch(getAllDiscountError(err));\n                    dispatch(setMessage(err?.message));\n                });\n        } catch (error) {\n            dispatch(getAllDiscountError('Something went wrong'));\n        }\n    };\n\nexport { updateDiscount, getAllDiscount, addDiscount, getDiscount };\n","import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormProvider, RHFTextField, RHFSelect } from '../../../components/hook-form';\nimport * as yup from 'yup';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { addDiscount, updateDiscount, getAllDiscount } from '../../../store/actions/DiscountActions';\nimport CircularProgressLoader from '../../../ui-component/CircularProgressLoader';\n\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Typography,\n    Grid,\n    Link,\n    Divider,\n    Select,\n    MenuItem,\n    Autocomplete\n} from '@material-ui/core';\nimport useStyles from '../../DialogStyles';\nimport { FormControl, TextField } from '@mui/material';\nimport axios from 'axios';\n\nconst LEVEL_ITEMS = [\n    { id: 1, status: 'GLOBAL' },\n    { id: 2, status: 'LIBRARY_PLAN' },\n    { id: 3, status: 'ONLINE_CLASS' },\n    { id: 4, status: 'PLAN' },\n    { id: 5, status: 'MODULE' },\n    { id: 6, status: 'USER' }\n];\n\nconst TYPE_ITEMS = [\n    { id: 1, status: 'PERCENTAGE' },\n    { id: 2, status: 'AMOUNT' }\n];\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250\n        }\n    }\n};\n\nconst validationSchema = yup.object({\n    code: yup.string('Enter Title').required('Code is required').trim(),\n    description: yup.string('Enter description').required('Description is required').trim(),\n    levelType: yup.string('Enter Level').required('Level is required'),\n    maxLimitPerUserProfile: yup.string('Enter user limit').required('User limit is required'),\n    type: yup.string('Enter Type').required('Type is required'),\n    value: yup.string('Enter Value').required('Value is required'),\n    minAmount: yup.string('Enter Min amount').required('Min amount is required'),\n    startDate: yup.string('Enter start date here').required('Start date is required'),\n    endDate: yup.string('Enter end date here').required('End date is required')\n});\n\nexport default function AddDiscounts(props) {\n    const { openAddDiscounts, setOpenAddDiscounts, isEditData, allModule, allPlans } = props;\n    console.log(allPlans);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [isLoading, setIsLoading] = useState(false);\n    const { getSearchedProfileData } = useSelector((state) => state?.addUser);\n    const [allUsers, setAllUSers] = useState();\n\n    const [finalArray, setFinalArray] = useState([]);\n\n    const [selectedSchools, setSelectedSchools] = useState([]);\n\n    console.log('final---', allUsers);\n\n    const handleUser = (value) => {\n        // let arr = [];\n        console.log(value);\n        setAllUSers(value);\n        // value.map((user) => arr.push(user.userId));\n        // console.log(arr);\n    };\n    const formInitialSchema = {\n        code: isEditData?.code || '',\n        description: isEditData?.description || '',\n        levelType: isEditData?.levelType || 'GLOBAL',\n        levelTypeIds: isEditData?.levelTypeIds || '',\n        maxLimitPerUserProfile: isEditData?.maxLimitPerUserProfile || '',\n        type: isEditData?.type || 'PERCENTAGE',\n        value: isEditData?.value || '',\n        minAmount: isEditData?.minAmount || '',\n        startDate: isEditData?.startDate || '',\n        endDate: isEditData?.endDate || ''\n    };\n    const methods = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(validationSchema),\n        defaultValues: formInitialSchema\n    });\n\n    const { reset, handleSubmit, watch } = methods;\n\n    const hide = watch('levelType');\n\n    const handlePopupClose = () => {\n        setOpenAddDiscounts(false);\n        reset();\n    };\n\n    const onSubmit = (data) => {\n        const arr = [];\n        let result = [];\n\n        // if (data?.levelType === 'PLAN') {\n        //     allPlans?.map((el) => arr.push[el.id]);\n\n        //     result = allPlans?.filter((x) => x.id)?.map((x) => x.id);\n        // }\n\n        // if (data?.levelType === 'MODULE') {\n        //     allModule?.map((el) => arr.push[el.id]);\n\n        //     result = allModule?.filter((x) => x.id)?.map((x) => x.id);\n        // }\n        // if (data?.levelType === 'USER') {\n        //     allUsers?.map((el) => arr.push[el.userId]);\n\n        //     result = allUsers?.filter((x) => x.userId)?.map((x) => x.userId);\n        // }\n\n        if (data?.levelType === 'PLAN') {\n            allPlans?.map((el) => arr.push[el.id]);\n\n            result = allUsers?.filter((x) => x.id)?.map((x) => x.id);\n        }\n\n        if (data?.levelType === 'MODULE') {\n            allModule?.map((el) => arr.push[el.id]);\n\n            result = allUsers?.filter((x) => x.id)?.map((x) => x.id);\n        }\n        if (data?.levelType === 'USER') {\n            allUsers?.map((el) => arr.push[el.userId]);\n\n            result = allUsers?.filter((x) => x.userId)?.map((x) => x.userId);\n        }\n        // console.log('userrrrrr--', allUsers)\n        // allUsers?.map((el) => arr.push[el.userId])\n\n        // const result = allUsers.filter(x => x.userId)?.map(x => x.userId)\n\n        console.log('arrrr--', arr);\n        console.log('result--', result);\n        // const payload = {\n        //     code: data?.code,\n        //     description: data?.description,\n        //     levelType: data?.levelType,\n        //     levelTypeIds: result?.length ? result : '',\n        //     maxLimitPerUserProfile: data?.maxLimitPerUserProfile,\n        //     type: data?.type,\n        //     value: data?.value,\n        //     minAmount: data?.minAmount,\n        //     startDate: data?.startDate,\n        //     endDate: data?.endDate\n        // };\n        let payloadArray = [];\n        if (data?.levelType === 'PLAN' || data?.levelType === 'MODULE' || data?.levelType === 'USER') {\n            const payloadarr = {\n                code: data?.code,\n                description: data?.description,\n                levelType: data?.levelType,\n                // levelTypeIds: result?.length ? result : '',\n                levelTypeIds: result,\n                maxLimitPerUserProfile: data?.maxLimitPerUserProfile,\n                type: data?.type,\n                value: data?.value,\n                minAmount: data?.minAmount,\n                startDate: data?.startDate,\n                endDate: data?.endDate\n            };\n            payloadArray.push(payloadarr);\n        } else {\n            const payloadarr1 = {\n                code: data?.code,\n                description: data?.description,\n                levelType: data?.levelType,\n                //   levelTypeIds: result?.length ? result : '',\n                maxLimitPerUserProfile: data?.maxLimitPerUserProfile,\n                type: data?.type,\n                value: data?.value,\n                minAmount: data?.minAmount,\n                startDate: data?.startDate,\n                endDate: data?.endDate\n            };\n            payloadArray.push(payloadarr1);\n        }\n        const payload = payloadArray[0];\n        console.log('payload--', payload);\n\n        if (isEditData) {\n            dispatch(\n                updateDiscount(payload, isEditData.id, () => {\n                    dispatch(getAllDiscount());\n                    handlePopupClose();\n                })\n            );\n        } else {\n            dispatch(\n                addDiscount(payload, () => {\n                    dispatch(getAllDiscount());\n                    handlePopupClose();\n                })\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (getSearchedProfileData && isEditData?.levelType === 'USER') {\n            const result = getSearchedProfileData?.filter((o1) => isEditData?.levelTypeIds?.includes(o1.userId));\n            setAllUSers(result);\n        }\n\n        if (getSearchedProfileData && isEditData?.levelType === 'MODULE') {\n            const result = allModule?.filter((o1) => isEditData?.levelTypeIds?.includes(o1.id));\n            setAllUSers(result);\n        }\n        if (getSearchedProfileData && isEditData?.levelType === 'PLAN') {\n            const result = allPlans?.filter((o1) => isEditData?.levelTypeIds?.includes(o1.id));\n            setAllUSers(result);\n        }\n    }, [getSearchedProfileData, allModule, allPlans]);\n\n    return (\n        <div>\n            <Dialog open={openAddDiscounts} maxWidth=\"md\">\n                <DialogTitle className={classes.dialogTitle}>\n                    <div className={classes.dialogTitleChild}>\n                        <Typography style={{ fontSize: '20px' }}>{!isEditData ? 'Add Discount' : 'Update Discount'}</Typography>\n                        <Link to=\"#\" onClick={handlePopupClose}>\n                            <CloseIcon className={classes.closeIcon} />\n                        </Link>\n                    </div>\n                </DialogTitle>\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n                    <DialogContent>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12} sm={6}>\n                                        <label>\n                                            Code <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFTextField name=\"code\" placeholder=\"Code here\" className={classes.textField} autoFocus />\n                                    </Grid>\n                                    <br /> <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label>\n                                            Description <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFTextField name=\"description\" placeholder=\"Code here\" className={classes.textField} />\n                                    </Grid>\n                                    <br /> <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label>\n                                            Level Type <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFSelect name=\"levelType\" label=\"\">\n                                            {LEVEL_ITEMS?.map((item, index) => (\n                                                <option key={index} value={item?.status}>\n                                                    {item?.status}\n                                                </option>\n                                            ))}\n                                        </RHFSelect>\n                                    </Grid>\n                                    <br />\n                                    <br />\n                                    {(hide === 'PLAN' || hide === 'MODULE' || hide === 'USER') && (\n                                        <Grid item xs={12} sm={6}>\n                                            {hide === 'USER' && (\n                                                <>\n                                                    <label>\n                                                        Select Users <span className={classes.mandatory}>*</span>\n                                                    </label>\n                                                    <Autocomplete\n                                                        multiple\n                                                        id=\"tags-outlined\"\n                                                        options={getSearchedProfileData}\n                                                        getOptionLabel={(option) => option.emailFirstNameLastName}\n                                                        // defaultValue={[top100Films[13]]}\n                                                        filterSelectedOptions\n                                                        renderInput={(params) => (\n                                                            <TextField\n                                                                {...params}\n                                                                // label=\"filterSelectedOptions\"\n                                                                placeholder=\"Select Users\"\n                                                            />\n                                                        )}\n                                                        value={allUsers}\n                                                        onChange={(event, newValue) => {\n                                                            handleUser(newValue);\n                                                        }}\n                                                    />\n                                                </>\n                                            )}\n\n                                            {hide === 'MODULE' && (\n                                                <>\n                                                    <label>\n                                                        Select Module <span className={classes.mandatory}>*</span>\n                                                    </label>\n                                                    <Autocomplete\n                                                        multiple\n                                                        id=\"tags-outlined\"\n                                                        options={allModule}\n                                                        getOptionLabel={(option) => option.title}\n                                                        // defaultValue={[top100Films[13]]}\n                                                        filterSelectedOptions\n                                                        renderInput={(params) => (\n                                                            <TextField\n                                                                {...params}\n                                                                // label=\"filterSelectedOptions\"\n                                                                placeholder=\"Select Module\"\n                                                            />\n                                                        )}\n                                                        value={allUsers}\n                                                        onChange={(event, newValue) => {\n                                                            handleUser(newValue);\n                                                        }}\n                                                    />\n                                                </>\n                                            )}\n\n                                            {hide === 'PLAN' && (\n                                                <>\n                                                    <label>\n                                                        Select Plan <span className={classes.mandatory}>*</span>\n                                                    </label>\n                                                    <Autocomplete\n                                                        multiple\n                                                        id=\"tags-outlined\"\n                                                        options={allPlans}\n                                                        name=\"levelTypeIds\"\n                                                        getOptionLabel={(option) => option.name}\n                                                        // defaultValue={[top100Films[13]]}\n                                                        filterSelectedOptions\n                                                        renderInput={(params) => (\n                                                            <TextField\n                                                                {...params}\n                                                                // label=\"filterSelectedOptions\"\n                                                                placeholder=\"Select Module\"\n                                                            />\n                                                        )}\n                                                        value={allUsers}\n                                                        onChange={(event, newValue) => {\n                                                            handleUser(newValue);\n                                                        }}\n                                                    />\n                                                </>\n                                            )}\n                                        </Grid>\n                                    )}\n                                    <br />\n                                    <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label>\n                                            Max Limit (Per User) <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFTextField\n                                            name=\"maxLimitPerUserProfile\"\n                                            placeholder=\"Per profile limit here\"\n                                            className={classes.textField}\n                                        />\n                                    </Grid>\n                                    <br /> <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label>\n                                            Type <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFSelect name=\"type\" label=\"\">\n                                            {TYPE_ITEMS?.map((item, index) => (\n                                                <option key={index} value={item?.status}>\n                                                    {item?.status}\n                                                </option>\n                                            ))}\n                                        </RHFSelect>\n                                    </Grid>\n                                    <br />\n                                    <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label>\n                                            Value <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFTextField name=\"value\" placeholder=\"Value here\" className={classes.textField} />\n                                    </Grid>\n                                    <br /> <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label>\n                                            Min Subscription Amount <span className={classes.mandatory}> * </span>\n                                        </label>\n                                        <RHFTextField name=\"minAmount\" placeholder=\"Min amount here\" className={classes.textField} />\n                                    </Grid>\n                                    <br />\n                                    <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label> Start(Date) </label>\n                                        <RHFTextField\n                                            name=\"startDate\"\n                                            type=\"date\"\n                                            placeholder=\"Start date here\"\n                                            className={classes.textField}\n                                            // onChange={(e) => setStartUTC(e.target.value)}\n                                            // value={startUTC}\n                                        />\n                                    </Grid>\n                                    <br />\n                                    <br />\n                                    <Grid item xs={12} sm={6}>\n                                        <label> End(Date)</label>\n                                        <RHFTextField\n                                            name=\"endDate\"\n                                            type=\"date\"\n                                            placeholder=\"End date here\"\n                                            className={classes.textField}\n                                            //onChange={(e) => setEndUTC(e.target.value)}\n                                            //value={endUTC}\n                                        />\n                                    </Grid>\n                                    <br />\n                                    <br />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <Divider style={{ marginTop: 15 }} />\n                    <DialogActions className={classes.dialogAction}>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonCancel} onClick={handlePopupClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"contained\" type=\"submit\" color=\"primary\" className={classes.buttonSubmit}>\n                            {!isEditData ? 'Add' : 'Update'}\n                        </Button>\n                    </DialogActions>\n                </FormProvider>\n            </Dialog>\n\n            <span className={classes.loader}>{isLoading ? CircularProgressLoader() : ''}</span>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllDiscount } from '../../store/actions/DiscountActions';\nimport MainCard from '../../ui-component/cards/MainCard';\nimport { withStyles, useTheme } from '@material-ui/styles';\nimport {\n    Grid,\n    Typography,\n    IconButton,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Tooltip\n} from '@material-ui/core';\n\nimport { IconSearch } from '@tabler/icons';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport useStyles from '../ViewTableStyles';\nimport AddDiscounts from './add-discount';\nimport { useParams } from 'react-router-dom';\nimport useUserRole from '../../hooks/useUserRole';\nimport { userProfileSearch } from '../../store/actions/AddUserActions';\nimport axios from 'axios';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function CouponDiscount() {\n    const classes = useStyles();\n    useUserRole({ roleList: ['ADMIN', 'SUPER_ADMIN'] });\n\n    const dispatch = useDispatch();\n    //const { id } = useParams();\n    const [value, setValue] = useState('');\n    const [openAddDiscounts, setOpenAddDiscounts] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(25);\n    const [isDiscountUpdateData, setDiscountUpdateData] = useState(null);\n\n    const { allDiscounts } = useSelector((state) => state?.discount);\n    const newData = allDiscounts?.content;\n    const [allModule, setAllModules] = useState([]);\n    const [allPlans, setAllPlans] = useState([]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        //setPage(0);\n    };\n    const handleDiscounts = (mid) => {\n        setOpenAddDiscounts(true);\n        setDiscountUpdateData(mid);\n    };\n\n    const getAllModule = async () => {\n        await axios\n            .get(`${process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS}/subscriptions-service/modules/search`)\n            .then((res) => {\n                if (res.status === 200) {\n                    // console.log('module-response', res)\n                    setAllModules(res.data);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    const getAllPlans = async () => {\n        await axios\n            .get(`${process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS}/subscriptions-service/plans/search`)\n            .then((res) => {\n                if (res.status === 200) {\n                    // console.log('plan-response', res)\n                    setAllPlans(res.data);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    useEffect(() => {\n        dispatch(getAllDiscount(value ? value : ''));\n    }, [value]);\n\n    useEffect(() => {\n        dispatch(userProfileSearch('', 'STUDENT'));\n        getAllModule();\n        getAllPlans();\n    }, []);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; All Discounts </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid container spacing={3} style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div>\n                                <OutlinedInput\n                                    label=\"hello\"\n                                    className={classes.searchControl}\n                                    id=\"input-search-header\"\n                                    value={value}\n                                    onChange={(e) => setValue(e.target.value)}\n                                    placeholder=\"Search on Type\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\">\n                                            <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div className={classes.btn}>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() => {\n                                        setOpenAddDiscounts(true);\n                                        setDiscountUpdateData(null);\n                                    }}\n                                    className={classes.btnAdd}\n                                >\n                                    Add Discount\n                                </Button>\n                            </div>\n                        </Grid>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell> Code </TableCell>\n                                    <TableCell> Description </TableCell>\n                                    <TableCell> Level Type </TableCell>\n                                    <TableCell> Max Limit (Per User) </TableCell>\n                                    <TableCell> Type </TableCell>\n                                    <TableCell> Value </TableCell>\n                                    <TableCell> Min Subscription Amount </TableCell>\n                                    <TableCell width=\"10%\"> Start Date </TableCell>\n                                    <TableCell width=\"10%\"> End Date </TableCell>\n                                    <TableCell> Action </TableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {!newData ? (\n                                <caption style={{ textAlign: 'center' }}>Sorry! No data available</caption>\n                            ) : (\n                                <TableBody>\n                                    {newData?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)?.map((row, index) => (\n                                        <StyledTableRow key={index}>\n                                            <TableCell> {row?.code} </TableCell>\n                                            <TableCell> {row?.description} </TableCell>\n                                            <TableCell> {row?.levelType} </TableCell>\n                                            <TableCell> {row?.maxLimitPerUserProfile} </TableCell>\n\n                                            <TableCell> {row?.type} </TableCell>\n                                            <TableCell> {row?.value} </TableCell>\n                                            <TableCell> {row?.minAmount} </TableCell>\n                                            <TableCell> {row?.startDate} </TableCell>\n                                            <TableCell> {row?.endDate} </TableCell>\n\n                                            <TableCell>\n                                                <Tooltip title=\"Update Discount\">\n                                                    <IconButton onClick={() => handleDiscounts(row)}>\n                                                        <EditIcon color=\"primary\" style={{ cursor: 'pointer' }} />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </TableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[25, 50, 100]}\n                        component=\"div\"\n                        count={newData?.length || 0}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n                {openAddDiscounts && (\n                    <AddDiscounts\n                        openAddDiscounts={openAddDiscounts}\n                        setOpenAddDiscounts={setOpenAddDiscounts}\n                        //discountId={id}\n                        isEditData={isDiscountUpdateData}\n                        allModule={allModule}\n                        allPlans={allPlans}\n                    />\n                )}\n            </MainCard>\n        </>\n    );\n}\n"],"sourceRoot":""}