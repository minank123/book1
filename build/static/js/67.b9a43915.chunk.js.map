{"version":3,"sources":["views/online-classes/report-cards/index.js","store/actions/ReportActions/index.js"],"names":["StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","AllReport","useUserRole","roleList","classes","useStyles","dispatch","useDispatch","history","useHistory","id","useParams","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","page","setPage","_useState5","_useState6","rowsPerPage","setRowsPerPage","allReportData","useSelector","state","report","newData","content","useEffect","getAllReport","_jsx","_Fragment","children","_jsxs","MainCard","className","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","Grid","titleStyle","item","OutlinedInput","searchControl","onChange","e","target","placeholder","startAdornment","InputAdornment","position","IconSearch","stroke","size","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","TableBody","slice","map","row","_row$profile","_row$profile2","_row$profile3","_row$profile4","profile","email","firstName","lastName","mobile","averageGrade","Tooltip","title","IconButton","onClick","_row$profile5","profileId","push","concat","VisibilityIcon","color","fontSize","style","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","sx","marginBottom","getReportError","error","type","GET_REPORT_ERROR","getAllReportError","GET_ALL_REPORT_ERROR","getReport","batchId","successCB","GET_REPORT_START","http","process","then","res","payload","GET_REPORT_SUCCESS","getReportSuccess","reportData","catch","err","setMessage","message","GET_ALL_REPORT_START","GET_ALL_REPORT_SUCCESS","getAllReportSuccess"],"mappings":"8ZA2BMA,EAAiBC,aAAW,SAACC,GAAK,MAAM,CAC1CC,KAAM,CACF,sBAAuB,CACnBC,gBAAiBF,EAAMG,QAAQC,OAAOC,QAGjD,GANsBN,CAMnBO,KAEW,SAASC,IACpBC,YAAY,CAAEC,SAAU,CAAC,QAAS,UAAU,iBAC5C,IAAMC,EAAUC,cACVC,EAAWC,cACXC,EAAUC,cACRC,EAAOC,cAAPD,GACRE,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAAwBL,mBAAS,GAAEM,EAAAJ,YAAAG,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,EAAsCT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAC1BG,EAAkBC,aAAY,SAACC,GAAK,OAAU,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,MAAM,IAAtDH,cACFI,EAAuB,OAAbJ,QAAa,IAAbA,OAAa,EAAbA,EAAeK,QAmB/B,OAJAC,qBAAU,WACN1B,EAAS2B,YAAavB,GAC1B,GAAG,IAGCwB,cAAAC,WAAA,CAAAC,SACIC,eAACC,IAAQ,CAAAF,SAAA,CACLC,eAAA,OAAKE,UAAWnC,EAAQoC,eAAeJ,SAAA,CACnCF,cAACO,IAAW,CAACF,UAAWnC,EAAQsC,WAChCR,cAAA,QAAMK,UAAWnC,EAAQuC,UAAUP,SAAC,yBAExCC,eAACO,IAAK,CAACC,UAAW,EAAGN,UAAWnC,EAAQT,KAAKyC,SAAA,CACzCF,cAACY,IAAI,CAACP,UAAWnC,EAAQ2C,WAAWX,SAChCF,cAACY,IAAI,CAACE,MAAI,EAAAZ,SACNF,cAACe,IAAa,CACVV,UAAWnC,EAAQ8C,cACnBxC,GAAG,sBACHM,MAAOA,EACPmC,SAAU,SAACC,GAAC,OAAKnC,EAASmC,EAAEC,OAAOrC,MAAM,EACzCsC,YAAY,SACZC,eACIrB,cAACsB,IAAc,CAACC,SAAS,QAAOrB,SAC5BF,cAACwB,IAAU,CAACC,OAAQ,IAAKC,KAAK,OAAOrB,UAAWnC,EAAQmD,yBAM5ErB,cAAC2B,IAAc,CAACtB,UAAWnC,EAAQ0D,eAAe1B,SAC9CC,eAAC0B,IAAK,CAACxB,UAAWnC,EAAQ4D,MAAO,aAAW,eAAc5B,SAAA,CACtDF,cAAC+B,IAAS,CAAC1B,UAAWnC,EAAQ8D,gBAAgB9B,SAC1CC,eAAC7C,EAAc,CAAA4C,SAAA,CACXF,cAACiC,IAAS,CAAA/B,SAAC,YACXF,cAACiC,IAAS,CAAA/B,SAAC,WACXF,cAACiC,IAAS,CAAA/B,SAAC,aACXF,cAACiC,IAAS,CAACC,MAAM,SAAQhC,SAAC,oBAC1BF,cAACiC,IAAS,CAACC,MAAM,QAAOhC,SAAC,kBAG/BN,EAGEI,cAACmC,IAAS,CAAAjC,SACLN,EAAQwC,MAAMlD,EAAOI,EAAaJ,EAAOI,EAAcA,GAAa+C,KAAI,SAACC,GAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACzEvC,eAAC7C,EAAc,CAAA4C,SAAA,CACXF,cAACiC,IAAS,CAAA/B,SAAK,OAAHoC,QAAG,IAAHA,GAAY,QAATC,EAAHD,EAAKK,eAAO,IAAAJ,OAAT,EAAHA,EAAcK,QAC1B5C,cAACiC,IAAS,CAAA/B,UAAK,OAAHoC,QAAG,IAAHA,GAAY,QAATE,EAAHF,EAAKK,eAAO,IAAAH,OAAT,EAAHA,EAAcK,WAAY,KAAS,OAAHP,QAAG,IAAHA,GAAY,QAATG,EAAHH,EAAKK,eAAO,IAAAF,OAAT,EAAHA,EAAcK,YAC1D9C,cAACiC,IAAS,CAAA/B,SAAK,OAAHoC,QAAG,IAAHA,GAAY,QAATI,EAAHJ,EAAKK,eAAO,IAAAD,OAAT,EAAHA,EAAcK,SAC1B/C,cAACiC,IAAS,CAACC,MAAM,SAAQhC,SAAK,OAAHoC,QAAG,IAAHA,OAAG,EAAHA,EAAKU,eAChChD,cAACiC,IAAS,CAACC,MAAM,QAAOhC,SACpBF,cAACiD,IAAO,CAACC,MAAM,cAAahD,SACxBF,cAACmD,IAAU,CAACC,QAAS,eAAAC,EAvD3CC,EAuD2C,OAvD3CA,EAuDqE,OAAHhB,QAAG,IAAHA,GAAY,QAATe,EAAHf,EAAKK,eAAO,IAAAU,OAAT,EAAHA,EAAcC,eAtDtGhF,EAAQiF,KAAK,iBAADC,OAAkBhF,EAAE,aAAAgF,OAAYF,GAsDoE,EAACpD,SACjEF,cAACyD,IAAc,CAACC,MAAM,UAAUC,SAAS,QAAQC,MAAO,CAAEC,OAAQ,qBAR7DvB,EAAI9D,GAYR,MAhBzBwB,cAAA,WAAS4D,MAAO,CAAEE,UAAW,UAAW5D,SAAC,kCAsBrDF,cAAC+D,IAAe,CACZC,mBAAoB,CAAC,GAAI,GAAI,IAC7BC,UAAU,MACVC,OAAc,OAAPtE,QAAO,IAAPA,OAAO,EAAPA,EAASuE,SAAU,EAC1B7E,YAAaA,EACbJ,KAAMA,EACNkF,aAjFK,SAACC,EAAOC,GAC7BnF,EAAQmF,EACZ,EAgFoBC,oBA9EY,SAACF,GAC7B9E,GAAgB8E,EAAMlD,OAAOrC,OAC7BK,EAAQ,EACZ,EA4EoBqF,GAAI,CACA,oCAAqC,CACjCC,aAAc,GAElB,kCAAmC,CAC/BA,aAAc,aAQ9C,C,mCC/IA,8FAiBMC,EAAiB,SAACC,GACpB,MAAO,CAAEC,KAAMC,KAAkBF,QACrC,EAQMG,EAAoB,SAACH,GACvB,MAAO,CAAEC,KAAMG,KAAsBJ,QACzC,EAEMK,EAAY,SAACC,EAAS3B,EAAW4B,GAAS,OAAK,SAAC9G,GAClDA,EApBO,CAAEwG,KAAMO,OAqBf,IACIC,YAAKC,uCAAwC,MAAM,mCAAD7B,OAAqCyB,EAAO,cAAAzB,OAAaF,IAAa,GACnHgC,MAAK,SAACC,GAIHnH,EAzBS,SAACoH,GACtB,MAAO,CAAEZ,KAAMa,KAAoBD,UACvC,CAuByBE,CAHO,CACZC,WAAYJ,KAGhBL,GAAaA,EAAUK,EAC3B,IACCK,OAAM,SAACC,GACJzH,EAASsG,EAAemB,IACxBzH,EAAS0H,YAAc,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKE,SAC7B,GACR,CAAE,MAAOpB,GACLvG,EAASsG,EAAe,wBAC5B,CACJ,CAAE,EAEI3E,EAAe,SAACkF,GAAO,OAAK,SAAC7G,GAC/BA,EA9BO,CAAEwG,KAAMoB,OA+Bf,IACIZ,YAAKC,uCAAwC,MAAM,mCAAD7B,OAAqCyB,EAAO,8BAA6B,GACtHK,MAAK,SAACC,GAIHnH,EAnCY,SAACoH,GACzB,MAAO,CAAEZ,KAAMqB,KAAwBT,UAC3C,CAiCyBU,CAHO,CACZ1G,cAAe+F,IAGvB,IACCK,OAAM,SAACC,GACJzH,EAAS0G,EAAkBe,IAC3BzH,EAAS0H,YAAc,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKE,SAC7B,GACR,CAAE,MAAOpB,GACLvG,EAAS0G,EAAkB,wBAC/B,CACJ,CAAE,C","file":"static/js/67.b9a43915.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { getAllReport } from '../../../store/actions/ReportActions';\nimport { withStyles } from '@material-ui/styles';\nimport { IconSearch } from '@tabler/icons';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport useStyles from '../../ViewTableStyles';\nimport {\n    Grid,\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Tooltip\n} from '@material-ui/core';\nimport useUserRole from '../../../hooks/useUserRole';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function AllReport() {\n    useUserRole({ roleList: ['ADMIN', 'TEACHER','SUPER_ADMIN'] });\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { id } = useParams();\n    const [value, setValue] = useState('');\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const { allReportData } = useSelector((state) => state?.report);\n    const newData = allReportData?.content;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleViewReport = (profileId) => {\n        history.push(`/admin/report/${id}/profile/${profileId}`);\n    };\n\n    useEffect(() => {\n        dispatch(getAllReport(id));\n    }, []);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; All Reports </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid className={classes.titleStyle}>\n                        <Grid item>\n                            <OutlinedInput\n                                className={classes.searchControl}\n                                id=\"input-search-header\"\n                                value={value}\n                                onChange={(e) => setValue(e.target.value)}\n                                placeholder=\"Search\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\">\n                                        <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n                                    </InputAdornment>\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell> Email </TableCell>\n                                    <TableCell> Name </TableCell>\n                                    <TableCell> Mobile </TableCell>\n                                    <TableCell align=\"center\"> Average Grade </TableCell>\n                                    <TableCell align=\"right\"> Action </TableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {!newData ? (\n                                <caption style={{ textAlign: 'center' }}>Sorry! No data available</caption>\n                            ) : (\n                                <TableBody>\n                                    {newData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                                        <StyledTableRow key={row.id}>\n                                            <TableCell>{row?.profile?.email}</TableCell>\n                                            <TableCell>{row?.profile?.firstName + ' ' + row?.profile?.lastName}</TableCell>\n                                            <TableCell>{row?.profile?.mobile}</TableCell>\n                                            <TableCell align=\"center\">{row?.averageGrade}</TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title=\"View Report\">\n                                                    <IconButton onClick={() => handleViewReport(row?.profile?.profileId)}>\n                                                        <VisibilityIcon color=\"primary\" fontSize=\"small\" style={{ cursor: 'pointer' }} />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </TableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[10, 15, 25]}\n                        component=\"div\"\n                        count={newData?.length || 0}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n            </MainCard>\n        </>\n    );\n}\n","import { http } from '../../../utils/http';\nimport { setMessage } from '../MessageActions';\nimport {\n    GET_REPORT_START,\n    GET_REPORT_SUCCESS,\n    GET_REPORT_ERROR,\n    GET_ALL_REPORT_START,\n    GET_ALL_REPORT_SUCCESS,\n    GET_ALL_REPORT_ERROR\n} from '../../constants';\n\nconst getReportStart = () => {\n    return { type: GET_REPORT_START };\n};\nconst getReportSuccess = (payload) => {\n    return { type: GET_REPORT_SUCCESS, payload };\n};\nconst getReportError = (error) => {\n    return { type: GET_REPORT_ERROR, error };\n};\n\nconst getAllReportStart = () => {\n    return { type: GET_ALL_REPORT_START };\n};\nconst getAllReportSuccess = (payload) => {\n    return { type: GET_ALL_REPORT_SUCCESS, payload };\n};\nconst getAllReportError = (error) => {\n    return { type: GET_ALL_REPORT_ERROR, error };\n};\n\nconst getReport = (batchId, profileId, successCB) => (dispatch) => {\n    dispatch(getReportStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BATCHES, 'GET', `batches-service/reports/batches/${batchId}/profiles/${profileId}`, true)\n            .then((res) => {\n                const payload = {\n                    reportData: res\n                };\n                dispatch(getReportSuccess(payload));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                dispatch(getReportError(err));\n                dispatch(setMessage(err?.message));\n            });\n    } catch (error) {\n        dispatch(getReportError('Something went wrong'));\n    }\n};\n\nconst getAllReport = (batchId) => (dispatch) => {\n    dispatch(getAllReportStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BATCHES, 'GET', `batches-service/reports/batches/${batchId}?pageNumber=1&pageSize=20`, true)\n            .then((res) => {\n                const payload = {\n                    allReportData: res\n                };\n                dispatch(getAllReportSuccess(payload));\n            })\n            .catch((err) => {\n                dispatch(getAllReportError(err));\n                dispatch(setMessage(err?.message));\n            });\n    } catch (error) {\n        dispatch(getAllReportError('Something went wrong'));\n    }\n};\n\nexport { getReport, getAllReport };\n"],"sourceRoot":""}