{"version":3,"sources":["views/subscription/admin/plan-options/add-plan-options/index.js","views/subscription/admin/plan-options/index.js"],"names":["typeItems","id","status","STATUS_ITEMS","updateValidationSchema","yup","price","required","type","durationInMonths","matches","maxPauseWeeks","addValidationSchema","typeError","AddPlansOptions","props","isOpen","setOpen","isEditData","classes","useStyles","dispatch","useDispatch","initialValues","useSelector","state","school","schoolList","toString","methods","useForm","mode","resolver","yupResolver","defaultValues","reset","handleSubmit","handlePopupClose","watch","useEffect","getSchoolList","_jsx","children","_jsxs","Dialog","open","paper","dialog","DialogTitle","className","dialogTitle","dialogTitleChild","Typography","style","fontSize","Link","to","onClick","CloseIcon","closeIcon","FormProvider","onSubmit","data","payload","updatePayload","updatePlanOption","getAllPlanOptions","addPlanOption","DialogContent","Grid","container","rowSpacing","item","xs","mandatory","RHFTextField","name","_Fragment","RHFSelect","label","value","map","index","Divider","marginTop","DialogActions","dialogAction","Button","variant","color","buttonCancel","buttonSubmit","StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","PlanOptions","useUserRole","roleList","loggedUserProfile","userProfile","useTheme","useParams","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","openAddPlanOptions","setOpenAddPlanOptions","_useState5","_useState6","page","setPage","_useState7","_useState8","rowsPerPage","setRowsPerPage","_useState9","_useState10","planOptionsId","setPlanOptionsId","newData","subscriptions","allPlanOptions","MainCard","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","display","justifyContent","role","btnAdd","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","TableBody","slice","row","success","main","warning","dark","Tooltip","title","IconButton","handlePlanOptions","EditIcon","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","sx","marginBottom","AddPlanOptions"],"mappings":"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","file":"static/js/103.c01b28d1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from '../../../../DialogStyles';\nimport { addPlanOption, updatePlanOption, getAllPlanOptions } from '../../../../../store/actions/SubscriptionActions';\nimport { getSchoolList } from '../../../../../store/actions/SchoolActions';\nimport { FormProvider, RHFTextField, RHFSelect } from '../../../../../components/hook-form';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography, Grid, Link, Divider } from '@material-ui/core';\n\nconst typeItems = [\n    { id: 0, status: 'TRIAL' },\n    { id: 1, status: 'QUARTERLY' },\n    { id: 2, status: 'HALF_YEARLY' },\n    { id: 3, status: 'YEARLY ' }\n];\n\nconst STATUS_ITEMS = [\n    { id: 0, status: 'ACTIVE' },\n    { id: 1, status: 'INACTIVE' }\n];\n\nconst updateValidationSchema = yup.object({\n    price: yup.number().required('Price is required'),\n    type: yup.string().required('Type is required'),\n    durationInMonths: yup\n        .string()\n        .required('Duration is required')\n        .matches(/^[1-9]\\d*$/),\n    maxPauseWeeks: yup.string().required('Status is required'),\n    status: yup.string().required('Status is required')\n});\nconst addValidationSchema = yup.object({\n    price: yup.number().typeError('Price must be a number').required('Price is required'),\n    type: yup.string().required('Type is required'),\n    status: yup.string().required('Status is required')\n});\n\nexport default function AddPlansOptions(props) {\n    const { isOpen, setOpen, isEditData, id } = props;\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { schoolList } = useSelector((state) => state?.school);\n    const schoolLists = schoolList;\n\n    const initialValues = {\n        price: isEditData?.price.toString() || '',\n        type: isEditData?.type || '',\n        durationInMonths: isEditData?.durationInMonths.toString() || '',\n        maxPauseWeeks: isEditData?.maxPauseWeeks.toString() || '',\n        status: isEditData?.status || 'ACTIVE'\n    };\n    const methods = useForm({\n        mode: 'onChange',\n        resolver: !isEditData ? yupResolver(addValidationSchema) : yupResolver(updateValidationSchema),\n        defaultValues: initialValues\n    });\n    const { reset, handleSubmit, watch } = methods;\n    const handlePopupClose = () => {\n        setOpen(false);\n        reset();\n    };\n    const onSubmit = (data) => {\n        const payload = {\n            price: data?.price,\n            type: data?.type,\n            status: data?.status\n        };\n\n        const updatePayload = {\n            price: data?.price,\n            durationInMonths: data?.durationInMonths,\n            maxPauseWeeks: data?.maxPauseWeeks,\n            status: data?.status\n        };\n\n        if (isEditData) {\n            dispatch(\n                updatePlanOption(updatePayload, isEditData.id, () => {\n                    dispatch(getAllPlanOptions(id));\n                    handlePopupClose();\n                })\n            );\n        } else {\n            dispatch(\n                addPlanOption(payload, id, () => {\n                    dispatch(getAllPlanOptions(id));\n                    handlePopupClose();\n                })\n            );\n        }\n    };\n\n    useEffect(() => {\n        dispatch(getSchoolList());\n    }, []);\n\n    return (\n        <div>\n            <Dialog open={isOpen} classes={{ paper: classes.dialog }}>\n                <DialogTitle className={classes.dialogTitle}>\n                    <div className={classes.dialogTitleChild}>\n                        <Typography style={{ fontSize: '20px' }}>\n                            {!isEditData ? 'Add Plan Option' : 'Update Plan Option'}\n                        </Typography>\n                        <Link to=\"#\" onClick={handlePopupClose}>\n                            <CloseIcon className={classes.closeIcon} />\n                        </Link>\n                    </div>\n                </DialogTitle>\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n                    <DialogContent>\n                        <Grid container rowSpacing={2}>\n                            <Grid item xs={12}>\n                                <label>\n                                    Price <span className={classes.mandatory}> * </span>\n                                </label>\n                                <RHFTextField name=\"price\" type=\"number\" />\n                            </Grid>\n                            {!isEditData ? (\n                                <Grid item xs={12}>\n                                    <label>\n                                        Type <span className={classes.mandatory}>*</span>\n                                    </label>\n                                    <RHFSelect name=\"type\" label=\"\">\n                                        <option value=\"\"> Select Type </option>\n                                        {typeItems?.map((item, index) => (\n                                            <option key={index} value={item?.status}>\n                                                {item?.status}\n                                            </option>\n                                        ))}\n                                    </RHFSelect>\n                                </Grid>\n                            ) : (\n                                <>\n                                    <Grid item xs={12}>\n                                        <label>\n                                            Duration (Months) <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFTextField name=\"durationInMonths\" type=\"number\" />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <label>\n                                            Pause Weeks (Max) <span className={classes.mandatory}>*</span>\n                                        </label>\n                                        <RHFTextField name=\"maxPauseWeeks\" type=\"number\" />\n                                    </Grid>\n                                </>\n                            )}\n                            <Grid item xs={12}>\n                                <label>\n                                    Status <span className={classes.mandatory}> * </span>\n                                </label>\n                                <RHFSelect name=\"status\" label=\"\">\n                                    {STATUS_ITEMS?.map((item, index) => (\n                                        <option key={index} value={item?.status}>\n                                            {item?.status}\n                                        </option>\n                                    ))}\n                                </RHFSelect>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n\n                    <Divider style={{ marginTop: 15 }} />\n                    <DialogActions className={classes.dialogAction}>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonCancel} onClick={handlePopupClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"contained\" type=\"submit\" className={classes.buttonSubmit}>\n                            {!isEditData ? 'Add' : 'Update'}\n                        </Button>\n                    </DialogActions>\n                </FormProvider>\n            </Dialog>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport MainCard from '../../../../ui-component/cards/MainCard';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllPlanOptions } from '../../../../store/actions/SubscriptionActions';\nimport { withStyles, useTheme } from '@material-ui/styles';\nimport {\n    Grid,\n    IconButton,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Typography,\n    Tooltip\n} from '@material-ui/core';\n\nimport { IconSearch } from '@tabler/icons';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport useStyles from '../../../ViewTableStyles';\nimport AddPlanOptions from './add-plan-options';\nimport { useParams } from 'react-router-dom';\nimport useUserRole from '../../../../hooks/useUserRole';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function PlanOptions() {\n    const classes = useStyles();\n    useUserRole({ roleList: ['ADMIN', 'SCHOOL_ADMIN','SUPER_ADMIN'] });\n    const { loggedUserProfile } = useSelector((state) => state?.userProfile);\n    const theme = useTheme();\n    const { id } = useParams();\n    const dispatch = useDispatch();\n    const [value, setValue] = useState('');\n    const [openAddPlanOptions, setOpenAddPlanOptions] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(25);\n    const [planOptionsId, setPlanOptionsId] = useState(null);\n    const { allPlanOptions } = useSelector((state) => state?.subscriptions);\n    const newData = allPlanOptions;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n    const handlePlanOptions = (id) => {\n        setOpenAddPlanOptions(true);\n        setPlanOptionsId(id);\n    };\n\n    useEffect(() => {\n        dispatch(getAllPlanOptions(id, rowsPerPage, value ? value : ''));\n    }, [rowsPerPage, value]);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp;Plan Options </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <div>\n                            {(loggedUserProfile?.role === 'ADMIN' || loggedUserProfile?.role === 'SUPER_ADMIN') && (\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        setOpenAddPlanOptions(true);\n                                        setPlanOptionsId(null);\n                                    }}\n                                    className={classes.btnAdd}\n                                >\n                                    Add Plan Options\n                                </Button>\n                            )}\n                        </div>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell> Price </TableCell>\n                                    <TableCell align=\"center\"> Duration (Month) </TableCell>\n                                    <TableCell align=\"center\"> Type </TableCell>\n                                    <TableCell align=\"center\"> Pause Weeks (Max) </TableCell>\n                                    <TableCell align=\"center\"> Status </TableCell>\n                                    {(loggedUserProfile?.role === 'ADMIN' || loggedUserProfile?.role === 'SUPER_ADMIN') && (\n                                        <TableCell align=\"right\"> Action </TableCell>\n                                    )}\n                                </StyledTableRow>\n                            </TableHead>\n                            {!newData ? (\n                                <caption style={{ textAlign: 'center' }}>Sorry! No data available</caption>\n                            ) : (\n                                <TableBody>\n                                    {newData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                                        <StyledTableRow key={row.id}>\n                                            <TableCell>{row.price}</TableCell>\n                                            <TableCell align=\"center\">{row.durationInMonths}</TableCell>\n                                            <TableCell align=\"center\">{row.type}</TableCell>\n                                            <TableCell align=\"center\">{row.maxPauseWeeks}</TableCell>\n                                            <TableCell align=\"center\">\n                                                <Typography\n                                                    className={classes.status}\n                                                    style={{\n                                                        backgroundColor:\n                                                            (row?.status === 'ACTIVE' && theme.palette.success.main) ||\n                                                            (row?.status === 'INACTIVE' && theme.palette.warning.dark)\n                                                    }}\n                                                >\n                                                    {row?.status}\n                                                </Typography>\n                                            </TableCell>\n\n                                            {(loggedUserProfile?.role === 'ADMIN' || loggedUserProfile?.role === 'SUPER_ADMIN') && (\n                                                <TableCell align=\"right\">\n                                                    <Tooltip title=\"Update Plan Options\">\n                                                        <IconButton onClick={() => handlePlanOptions(row)}>\n                                                            <EditIcon color=\"primary\" style={{ cursor: 'pointer' }} />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                </TableCell>\n                                            )}\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[25, 50, 100]}\n                        component=\"div\"\n                        count={newData?.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n                {openAddPlanOptions && (\n                    <AddPlanOptions isOpen={openAddPlanOptions} setOpen={setOpenAddPlanOptions} isEditData={planOptionsId} id={id} />\n                )}\n            </MainCard>\n        </>\n    );\n}\n"],"sourceRoot":""}