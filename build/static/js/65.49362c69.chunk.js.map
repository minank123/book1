{"version":3,"sources":["views/online-classes/courses-feedbacks/index.js","store/actions/FeedbackActions/index.js"],"names":["StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","AllFeedback","_newData$slice","classes","useStyles","useUserRole","roleList","dispatch","useDispatch","history","useHistory","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","page","setPage","_useState5","_useState6","rowsPerPage","setRowsPerPage","allFeedbackData","useSelector","state","feedback","newData","content","useEffect","getAllFeedback","_jsx","_Fragment","children","_jsxs","MainCard","className","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","Grid","titleStyle","item","OutlinedInput","searchControl","id","onChange","e","target","placeholder","startAdornment","InputAdornment","position","IconSearch","stroke","size","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","TableBody","slice","map","row","index","_row$module","_row$profile","_row$profile2","module","title","highlight","comment","profile","email","mobile","Tooltip","IconButton","onClick","push","concat","VisibilityIcon","color","fontSize","style","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","totalElements","onPageChange","event","newPage","onRowsPerPageChange","sx","marginBottom","getFeedbackError","error","type","GET_FEEDBACK_ERROR","getAllFeedbackError","GET_ALL_FEEDBACK_ERROR","getFeedback","successCB","GET_FEEDBACK_START","http","process","then","res","payload","GET_FEEDBACK_SUCCESS","getFeedbackSuccess","feedbackData","catch","err","setMessage","message","searchData","arguments","length","undefined","GET_ALL_FEEDBACK_START","GET_ALL_FEEDBACK_SUCCESS","getAllFeedbackSuccess"],"mappings":"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","file":"static/js/65.49362c69.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { getAllFeedback } from '../../../store/actions/FeedbackActions';\nimport { withStyles } from '@material-ui/styles';\nimport { IconSearch } from '@tabler/icons';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport useStyles from '../../ViewTableStyles';\nimport {\n    Grid,\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Tooltip\n} from '@material-ui/core';\nimport useUserRole from '../../../hooks/useUserRole';\nimport { useTheme } from '@emotion/react';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function AllFeedback() {\n    const classes = useStyles();\n    useUserRole({ roleList: ['ADMIN', 'TEACHER','SUPER_ADMIN'] });\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [value, setValue] = useState('');\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const { allFeedbackData } = useSelector((state) => state?.feedback);\n    const newData = allFeedbackData?.content;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        //setPage(0);\n    };\n\n    const handleViewFeedback = (id) => {\n        history.push(`/admin/course/${id}/feedback`);\n    };\n\n    useEffect(() => {\n        dispatch(getAllFeedback(value ? value : '', page + 1, rowsPerPage));\n    }, [value, page, rowsPerPage]);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; All Feedbacks </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid className={classes.titleStyle}>\n                        <Grid item>\n                            <OutlinedInput\n                                className={classes.searchControl}\n                                id=\"input-search-header\"\n                                value={value}\n                                onChange={(e) => setValue(e.target.value)}\n                                placeholder=\"Search\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\">\n                                        <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n                                    </InputAdornment>\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell> Module </TableCell>\n                                    <TableCell> Highlight </TableCell>\n                                    <TableCell align=\"center\"> Comment </TableCell>\n                                    <TableCell align=\"center\"> Email </TableCell>\n                                    <TableCell align=\"center\"> Mobile </TableCell>\n                                    <TableCell align=\"right\"> Action </TableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {!newData ? (\n                                <caption style={{ textAlign: 'center' }}> Sorry! No data available </caption>\n                            ) : (\n                                <TableBody>\n                                    {newData?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)?.map((row, index) => (\n                                        <StyledTableRow key={index}>\n                                            <TableCell> {row?.module?.title} </TableCell>\n                                            <TableCell> {row?.highlight} </TableCell>\n                                            <TableCell align=\"center\"> {row?.comment} </TableCell>\n                                            <TableCell align=\"center\"> {row?.profile?.email} </TableCell>\n                                            <TableCell align=\"center\"> {row?.profile?.mobile} </TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title=\"View Feedback\">\n                                                    <IconButton onClick={() => handleViewFeedback(row?.id)}>\n                                                        <VisibilityIcon color=\"primary\" fontSize=\"small\" style={{ cursor: 'pointer' }} />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </TableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[10, 15, 25]}\n                        component=\"div\"\n                        count={allFeedbackData?.totalElements || 0}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n            </MainCard>\n        </>\n    );\n}\n","import { http } from '../../../utils/http';\nimport { setMessage } from '../MessageActions';\nimport {\n    GET_ALL_FEEDBACK_START,\n    GET_ALL_FEEDBACK_SUCCESS,\n    GET_ALL_FEEDBACK_ERROR,\n    GET_ALL_COURSE_FEEDBACK_START,\n    GET_ALL_COURSE_FEEDBACK_SUCCESS,\n    GET_ALL_COURSE_FEEDBACK_ERROR,\n    GET_FEEDBACK_START,\n    GET_FEEDBACK_SUCCESS,\n    GET_FEEDBACK_ERROR\n} from '../../constants';\n\nconst getFeedbackStart = () => {\n    return { type: GET_FEEDBACK_START };\n};\nconst getFeedbackSuccess = (payload) => {\n    return { type: GET_FEEDBACK_SUCCESS, payload };\n};\nconst getFeedbackError = (error) => {\n    return { type: GET_FEEDBACK_ERROR, error };\n};\n\nconst getAllFeedbackStart = () => {\n    return { type: GET_ALL_FEEDBACK_START };\n};\nconst getAllFeedbackSuccess = (payload) => {\n    return { type: GET_ALL_FEEDBACK_SUCCESS, payload };\n};\nconst getAllFeedbackError = (error) => {\n    return { type: GET_ALL_FEEDBACK_ERROR, error };\n};\n\nconst getCourseAllFeedbackStart = () => {\n    return { type: GET_ALL_COURSE_FEEDBACK_START };\n};\nconst getCourseAllFeedbackSuccess = (payload) => {\n    return { type: GET_ALL_COURSE_FEEDBACK_SUCCESS, payload };\n};\nconst getCourseAllFeedbackError = (error) => {\n    return { type: GET_ALL_COURSE_FEEDBACK_ERROR, error };\n};\n\nconst addFeedback = (payload, courseId, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BATCHES, 'POST', `batches-service/feedbacks/courses/${courseId}`, payload, true)\n            .then((res) => {\n                dispatch(setMessage(res?.message));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst updateFeedback = (payload, id, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BATCHES, 'PUT', `batches-service/feedbacks/${id}`, payload, true)\n            .then((res) => {\n                if (res) {\n                    dispatch(setMessage(res?.message));\n                    successCB && successCB(res);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst deleteFeedback = (id, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BATCHES, 'DELETE', `batches-service/feedbacks/${id}`, true)\n            .then((res) => {\n                if (res) {\n                    dispatch(setMessage('Feedback deleted successfully'));\n                    successCB && successCB(res);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst getFeedback = (id, successCB) => (dispatch) => {\n    dispatch(getFeedbackStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BATCHES, 'GET', `batches-service/feedbacks/${id}`, true)\n            .then((res) => {\n                const payload = {\n                    feedbackData: res\n                };\n                dispatch(getFeedbackSuccess(payload));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                dispatch(getFeedbackError(err));\n                dispatch(setMessage(err?.message));\n            });\n    } catch (error) {\n        dispatch(getFeedbackError('Something went wrong'));\n    }\n};\n\nconst getAllFeedback =\n    (searchData = '', page = 1, rowsPerPage = 10) =>\n    (dispatch) => {\n        dispatch(getAllFeedbackStart());\n        try {\n            http(\n                process.env.REACT_APP_ROOT_URL_BATCHES,\n                'GET',\n                `batches-service/feedbacks?searchKey=${searchData}&pageNumber=${page}&pageSize=${rowsPerPage}`,\n                true\n            )\n                .then((res) => {\n                    const payload = {\n                        allFeedbackData: res\n                    };\n                    dispatch(getAllFeedbackSuccess(payload));\n                })\n                .catch((err) => {\n                    dispatch(getAllFeedbackError(err));\n                    dispatch(setMessage(err?.message));\n                });\n        } catch (error) {\n            dispatch(getAllFeedbackError('Something went wrong'));\n        }\n    };\n\nconst getCourseAllFeedback = (id) => (dispatch) => {\n    dispatch(getCourseAllFeedbackStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BATCHES, 'GET', `batches-service/feedbacks/courses/${id}?pageNumber=1&pageSize=20`, true)\n            .then((res) => {\n                const payload = {\n                    courseFeedbackData: res\n                };\n                dispatch(getCourseAllFeedbackSuccess(payload));\n            })\n            .catch((err) => {\n                dispatch(getCourseAllFeedbackError(err));\n                dispatch(setMessage(err?.message));\n            });\n    } catch (error) {\n        dispatch(getCourseAllFeedbackError('Something went wrong'));\n    }\n};\n\nexport { addFeedback, updateFeedback, getFeedback, getAllFeedback, getCourseAllFeedback, deleteFeedback };\n"],"sourceRoot":""}