{"version":3,"sources":["views/online-classes/grades/add-grade/tableRows.js","views/online-classes/grades/add-grade/index.js","views/online-classes/grades/grade-table/index.js"],"names":["TableRows","_ref","rowsData","deleteTableRows","handleChange","map","data","index","grade","description","_jsxs","children","_jsx","type","value","onChange","evnt","name","className","onClick","AddGrades","props","openAddGrades","setOpenAddGrades","_useState","id","useState","_useState2","_slicedToArray","setRowsData","classes","useStyles","dispatch","useDispatch","_useState3","_useState4","isLoading","handlePopupClose","Dialog","open","paper","dialog","DialogTitle","dialogTitle","dialogTitleChild","Typography","style","fontSize","Link","to","CloseIcon","closeIcon","DialogContent","Grid","container","verticalAlign","concat","_toConsumableArray","rows","splice","_evnt$target","target","rowsInput","Divider","marginTop","DialogActions","dialogAction","Button","variant","color","buttonCancel","buttonSubmit","updateGrade","getAllGrade","loader","CircularProgressLoader","StyledTableRow","withStyles","theme","_card","root","backgroundColor","palette","action","hover","width","card","marginLeft","_defineProperty","breakpoints","down","justifyContent","infoCard","height","borderRadius","TableRow","GradeTable","active","useUserRole","roleList","loggedUserProfile","useSelector","state","userProfile","_useState5","_useState6","page","setPage","_useState7","_useState8","rowsPerPage","setRowsPerPage","_useState9","_useState10","addGradePopup","setAddGradePopup","_useState11","_useState12","gradeId","_useState13","_useState14","setGradeUpdateData","allGrades","newData","_useState15","isOpen","title","subTitle","_useState16","confirmDialog","setConfirmDialog","useEffect","MainCard","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","spacing","display","item","xs","sm","md","btn","role","btnAdd","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","TableBody","slice","row","sequence","textAlign","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","sx","marginBottom","ConfirmDialog"],"mappings":"2cAEe,SAASA,EAASC,GAA+C,IAA5CC,EAAQD,EAARC,SAAUC,EAAeF,EAAfE,gBAAiBC,EAAYH,EAAZG,aAC3D,OAAe,OAARF,QAAQ,IAARA,OAAQ,EAARA,EAAUG,KAAI,SAACC,EAAMC,GACxB,IAAQC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,YACf,OACIC,eAAA,MAAAC,SAAA,CACIC,cAAA,MAAAD,SACIC,cAAA,SAAOC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAACC,GAAI,OAAKZ,EAAaG,EAAOS,EAAK,EAAEC,KAAK,QAAQC,UAAU,mBAE3GN,cAAA,MAAAD,SACIC,cAAA,SACIC,KAAK,OACLC,MAAOL,EACPM,SAAU,SAACC,GAAI,OAAKZ,EAAaG,EAAOS,EAAK,EAC7CC,KAAK,cACLC,UAAU,mBAIlBN,cAAA,MAAAD,SACIC,cAAA,UAAQM,UAAU,yBAAyBC,QAAS,kBAAMhB,EAAgBI,EAAM,EAACI,SAAC,UAfjFJ,EAqBjB,GACJ,C,aClBe,SAASa,EAAUC,GAC9B,IAAQC,EAA8CD,EAA9CC,cAAeC,EAA+BF,EAA/BE,iBACvBC,GADsDH,EAAbI,GAAaJ,EAATf,KACboB,mBAAS,CACrC,CACIlB,MAAO,GACPC,YAAa,OAEnBkB,EAAAC,YAAAJ,EAAA,GALKtB,EAAQyB,EAAA,GAAEE,EAAWF,EAAA,GAMtBG,EAAUC,cACVC,EAAWC,cACjBC,EAAkCR,oBAAS,GAAMS,EAAAP,YAAAM,EAAA,GAA1CE,EAASD,EAAA,GAEVE,GAFwBF,EAAA,GAEL,WACrBZ,GAAiB,EACrB,GA+BA,OACIb,eAAA,OAAAC,SAAA,CACID,eAAC4B,IAAM,CAACC,KAAMjB,EAAeQ,QAAS,CAAEU,MAAOV,EAAQW,QAAS9B,SAAA,CAC5DC,cAAC8B,IAAW,CAACxB,UAAWY,EAAQa,YAAYhC,SACxCD,eAAA,OAAKQ,UAAWY,EAAQc,iBAAiBjC,SAAA,CACrCC,cAACiC,IAAU,CAACC,MAAO,CAAEC,SAAU,QAASpC,SAAC,mBACzCC,cAACoC,IAAI,CAACC,GAAG,IAAI9B,QAASkB,EAAiB1B,SACnCC,cAACsC,IAAS,CAAChC,UAAWY,EAAQqB,mBAK1CvC,cAACwC,IAAa,CAAAzC,SACVC,cAACyC,IAAI,CAACC,WAAS,EAAA3C,SACXC,cAAA,OAAKM,UAAU,YAAWP,SACtBD,eAAA,OAAKQ,UAAU,MAAKP,SAAA,CAChBC,cAAA,OAAKM,UAAU,WAAUP,SACrBD,eAAA,SAAOQ,UAAU,QAAOP,SAAA,CACpBC,cAAA,SAAAD,SACID,eAAA,MAAAC,SAAA,CACIC,cAAA,MAAIkC,MAAO,CAAES,cAAe,UAAW5C,SAAC,YACxCC,cAAA,MAAIkC,MAAO,CAAES,cAAe,UAAW5C,SAAC,kBAExCC,cAAA,MAAAD,SACIC,cAAA,UAAQM,UAAU,0BAA0BC,QA3CvE,WAKjBU,EAAY,GAAD2B,OAAAC,YAAKvD,GAAQ,CAJN,CACdM,MAAO,GACPC,YAAa,MAGrB,EAqCkHE,SAAC,aAM/EC,cAAA,SAAAD,SACIC,cAACZ,EAAS,CAACE,SAAUA,EAAUC,gBA3C/C,SAACI,GACrB,IAAMmD,EAAID,YAAOvD,GACjBwD,EAAKC,OAAOpD,EAAO,GACnBsB,EAAY6B,EAChB,EAuCyGtD,aArCpF,SAACG,EAAOS,GACzB,IAAA4C,EAAwB5C,EAAK6C,OAArB5C,EAAI2C,EAAJ3C,KAAMH,EAAK8C,EAAL9C,MACRgD,EAASL,YAAOvD,GACtB4D,EAAUvD,GAAOU,GAAQH,EACzBe,EAAYiC,EAChB,WAoC4BlD,cAAA,OAAKM,UAAU,sBAK/BN,cAACmD,IAAO,CAACjB,MAAO,CAAEkB,UAAW,MAC7BtD,eAACuD,IAAa,CAAC/C,UAAWY,EAAQoC,aAAavD,SAAA,CAC3CC,cAACuD,IAAM,CAACC,QAAQ,WAAWC,MAAM,YAAYnD,UAAWY,EAAQwC,aAAcnD,QAASkB,EAAiB1B,SAAC,UAIzGC,cAACuD,IAAM,CAACC,QAAQ,YAAYC,MAAM,UAAUxD,KAAK,SAASK,UAAWY,EAAQyC,aAAcpD,QA3E1F,WACba,EACIwC,YAAYtE,GAAU,WAClB8B,EAASyC,cACb,KAEJpC,GACJ,EAoE6H1B,SAAC,iBAMtHD,eAAA,QAAMQ,UAAWY,EAAQ4C,OAAO/D,SAAA,CAAEyB,EAAYuC,cAA2B,GAAG,SAGxF,C,YChFMC,EAAiBC,aAAW,SAACC,GAAK,IAAAC,EAAA,MAAM,CAC1CC,KAAM,CACF,sBAAuB,CACnBC,gBAAiBH,EAAMI,QAAQC,OAAOC,MACtCC,MAAO,SAGfC,MAAIP,EAAA,CACAQ,WAAY,KAAGC,YAAAT,EACdD,EAAMW,YAAYC,KAAK,MAAQ,CAC5BC,eAAgB,SAChBJ,WAAY,MACfC,YAAAT,EACAD,EAAMW,YAAYC,KAAK,MAAQ,CAC5BC,eAAgB,SAChBJ,WAAY,MACfR,GAELa,SAAQJ,YAAA,CACJH,MAAO,QACPQ,OAAQ,OACR7B,UAAW,SACXiB,gBAAiB,UACjBa,aAAc,QACbhB,EAAMW,YAAYC,KAAK,MAAQ,CAC5B1B,UAAW,GACX6B,OAAQ,SAGnB,GA7BsBhB,CA6BnBkB,KAEW,SAASC,EAAU/F,GAASA,EAANgG,OAAW,IACtCnE,EAAUC,cAChBmE,YAAY,CAAEC,SAAU,CAAC,QAAS,UAAW,UAAU,iBACvD,IAAQC,EAAsBC,aAAY,SAACC,GAAK,OAAU,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,WAAW,IAA/DH,kBACFpE,EAAWC,cACjBT,EAA0BE,mBAAS,IAAGC,EAAAC,YAAAJ,EAAA,GACtCU,GADYP,EAAA,GAAUA,EAAA,GACoBD,oBAAS,IAAMS,EAAAP,YAAAM,EAAA,GACzDsE,GADoBrE,EAAA,GAAkBA,EAAA,GACdT,mBAAS,IAAE+E,EAAA7E,YAAA4E,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,EAAsClF,mBAAS,IAAGmF,EAAAjF,YAAAgF,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElCG,EAA0CtF,oBAAS,GAAMuF,EAAArF,YAAAoF,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,EAA8B1F,mBAAS,IAAG2F,EAAAzF,YAAAwF,EAAA,GAAnCE,EAAOD,EAAA,GACdE,GAD0BF,EAAA,GACsB3F,mBAAS,OAAK8F,EAAA5F,YAAA2F,EAAA,GAApCE,GAAFD,EAAA,GAAoBA,EAAA,IACpCE,EAAcrB,aAAY,SAACC,GAAK,OAAU,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO9F,KAAK,IAAjDkH,UACFC,EAAUD,EAEhBE,EAA0ClG,mBAAS,CAC/CmG,QAAQ,EACRC,MAAO,GACPC,SAAU,KACZC,EAAApG,YAAAgG,EAAA,GAJKK,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAyHtC,OArGAG,qBAAU,WACNnG,EAASyC,cACb,GAAG,IAoGC7D,cAAA,OAAAD,SACID,eAAC0H,IAAQ,CAAAzH,SAAA,CACLD,eAAA,OAAKQ,UAAWY,EAAQuG,eAAe1H,SAAA,CACnCC,cAAC0H,IAAW,CAACpH,UAAWY,EAAQyG,WAChC3H,cAAA,QAAMM,UAAWY,EAAQ0G,UAAU7H,SAAC,wBAExCD,eAAC+H,IAAK,CAACC,UAAW,EAAGxH,UAAWY,EAAQkD,KAAKrE,SAAA,CACzCD,eAAC2C,IAAI,CAACC,WAAS,EAACqF,QAAS,EAAG7F,MAAO,CAAE8F,QAAS,OAAQjD,eAAgB,iBAAkBhF,SAAA,CACpFC,cAACyC,IAAI,CAACwF,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,IAC9BpI,cAACyC,IAAI,CAACwF,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAErI,SAC5BC,cAAA,OAAKM,UAAWY,EAAQmH,IAAItI,UACM,WAAX,OAAjByF,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB8C,OAAgD,iBAAX,OAAjB9C,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB8C,QACxDtI,cAACuD,IAAM,CACHC,QAAQ,YACRjD,QAAS,WACLgG,GAAiB,GACjBM,EAAmB,KACvB,EACAvG,UAAWY,EAAQqH,OAAOxI,SAC7B,wBAOjBC,cAACwI,IAAc,CAAClI,UAAWY,EAAQuH,eAAe1I,SAC9CD,eAAC4I,IAAK,CAACpI,UAAWY,EAAQyH,MAAO,aAAW,eAAc5I,SAAA,CACtDC,cAAC4I,IAAS,CAACtI,UAAWY,EAAQ2H,gBAAgB9I,SAC1CD,eAACkE,EAAc,CAAAjE,SAAA,CACXC,cAAC8I,IAAS,CAACC,MAAM,SAAQhJ,SAAC,YAC1BC,cAAC8I,IAAS,CAACC,MAAM,SAAQhJ,SAAC,uBAGhCgH,EAGE/G,cAACgJ,IAAS,CAAAjJ,SACE,OAAPgH,QAAO,IAAPA,OAAO,EAAPA,EAASkC,MAAMnD,EAAOI,EAAaJ,EAAOI,EAAcA,GAAazG,KAAI,SAACyJ,GAAG,OAC1EpJ,eAACkE,EAAc,CAAAjE,SAAA,CACXD,eAACgJ,IAAS,CAACC,MAAM,SAAQhJ,SAAA,CAAC,IAAEmJ,EAAItJ,MAAM,OACtCE,eAACgJ,IAAS,CAACC,MAAM,SAAQhJ,SAAA,CAAC,IAAEmJ,EAAIrJ,YAAY,SAF3BqJ,EAAIC,SAGR,MAPzBnJ,cAAA,WAASkC,MAAO,CAAEkH,UAAW,UAAWrJ,SAAC,mCAarDC,cAACqJ,IAAe,CACZC,mBAAoB,CAAC,GAAI,GAAI,IAC7BC,UAAU,MACVC,OAAc,OAAPzC,QAAO,IAAPA,OAAO,EAAPA,EAAS0C,SAAU,EAC1BvD,YAAaA,EACbJ,KAAMA,EACN4D,aA1KK,SAACC,EAAOC,GAC7B7D,EAAQ6D,EACZ,EAyKoBC,oBAvKY,SAACF,GAC7BxD,GAAgBwD,EAAM1G,OAAO/C,OAC7B6F,EAAQ,EACZ,EAqKoB+D,GAAI,CACA,oCAAqC,CACjCC,aAAc,GAElB,kCAAmC,CAC/BA,aAAc,SAM7BzD,GACGtG,cAACQ,EAAS,CAACE,cAAe4F,EAAe3F,iBAAkB4F,EAAkB1F,GAAI6F,EAAShH,KAAMoH,IAGnGO,GAAiBrH,cAACgK,IAAa,CAAC3C,cAAeA,EAAeC,iBAAkBA,QAIjG,C","file":"static/js/95.15c96269.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function TableRows({ rowsData, deleteTableRows, handleChange }) {\n    return rowsData?.map((data, index) => {\n        const { grade, description } = data;\n        return (\n            <tr key={index}>\n                <td>\n                    <input type=\"text\" value={grade} onChange={(evnt) => handleChange(index, evnt)} name=\"grade\" className=\"form-control\" />\n                </td>\n                <td>\n                    <input\n                        type=\"text\"\n                        value={description}\n                        onChange={(evnt) => handleChange(index, evnt)}\n                        name=\"description\"\n                        className=\"form-control\"\n                    />\n                </td>\n\n                <td>\n                    <button className=\"btn btn-outline-danger\" onClick={() => deleteTableRows(index)}>\n                        x\n                    </button>\n                </td>\n            </tr>\n        );\n    });\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CircularProgressLoader from '../../../../ui-component/CircularProgressLoader';\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography, Grid, TextField, Link, Divider } from '@material-ui/core';\nimport { getAllGrade, updateGrade } from '../../../../store/actions/GradeActions';\nimport TableRows from './tableRows';\nimport useStyles from '../../../DialogStyles';\n\nexport default function AddGrades(props) {\n    const { openAddGrades, setOpenAddGrades, id, data } = props;\n    const [rowsData, setRowsData] = useState([\n        {\n            grade: '',\n            description: ''\n        }\n    ]);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [isLoading, setIsLoading] = useState(false);\n\n    const handlePopupClose = () => {\n        setOpenAddGrades(false);\n    };\n\n    const onSubmit = () => {\n        dispatch(\n            updateGrade(rowsData, () => {\n                dispatch(getAllGrade());\n            })\n        );\n        handlePopupClose();\n    };\n\n    // dynamic row\n    const addTableRows = () => {\n        const rowsInput = {\n            grade: '',\n            description: ''\n        };\n        setRowsData([...rowsData, rowsInput]);\n    };\n    const deleteTableRows = (index) => {\n        const rows = [...rowsData];\n        rows.splice(index, 1);\n        setRowsData(rows);\n    };\n\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target;\n        const rowsInput = [...rowsData];\n        rowsInput[index][name] = value;\n        setRowsData(rowsInput);\n    };\n    return (\n        <div>\n            <Dialog open={openAddGrades} classes={{ paper: classes.dialog }}>\n                <DialogTitle className={classes.dialogTitle}>\n                    <div className={classes.dialogTitleChild}>\n                        <Typography style={{ fontSize: '20px' }}> Update Grade </Typography>\n                        <Link to=\"#\" onClick={handlePopupClose}>\n                            <CloseIcon className={classes.closeIcon} />\n                        </Link>\n                    </div>\n                </DialogTitle>\n\n                <DialogContent>\n                    <Grid container>\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-8\">\n                                    <table className=\"table\">\n                                        <thead>\n                                            <tr>\n                                                <th style={{ verticalAlign: 'middle' }}> Grade </th>\n                                                <th style={{ verticalAlign: 'middle' }}> Description </th>\n\n                                                <th>\n                                                    <button className=\"btn btn-outline-success\" onClick={addTableRows}>\n                                                        +\n                                                    </button>\n                                                </th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <TableRows rowsData={rowsData} deleteTableRows={deleteTableRows} handleChange={handleChange} />\n                                        </tbody>\n                                    </table>\n                                </div>\n                                <div className=\"col-sm-4\"></div>\n                            </div>\n                        </div>\n                    </Grid>\n                </DialogContent>\n                <Divider style={{ marginTop: 15 }} />\n                <DialogActions className={classes.dialogAction}>\n                    <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonCancel} onClick={handlePopupClose}>\n                        Close\n                    </Button>\n\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.buttonSubmit} onClick={onSubmit}>\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <span className={classes.loader}>{isLoading ? CircularProgressLoader() : ''} </span>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllGrade } from '../../../../store/actions/GradeActions';\nimport MainCard from '../../../../ui-component/cards/MainCard';\nimport ConfirmDialog from '../../../../ui-component/ConfirmDialog/ConfirmDialog';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Grid,\n    IconButton,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Card\n} from '@material-ui/core';\n\nimport { IconSearch } from '@tabler/icons';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport useStyles from '../../../ViewTableStyles';\nimport AddGrades from '../add-grade';\nimport useUserRole from '../../../../hooks/useUserRole';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n            width: '100%'\n        }\n    },\n    card: {\n        marginLeft: 550,\n        [theme.breakpoints.down('md')]: {\n            justifyContent: 'center',\n            marginLeft: 100\n        },\n        [theme.breakpoints.down('md')]: {\n            justifyContent: 'center',\n            marginLeft: 250\n        }\n    },\n    infoCard: {\n        width: '640px',\n        height: 'auto',\n        marginTop: '-145px',\n        backgroundColor: '#FFFBFC',\n        borderRadius: '24px',\n        [theme.breakpoints.down('md')]: {\n            marginTop: 50,\n            height: 'auto'\n        }\n    }\n}))(TableRow);\n\nexport default function GradeTable({ active }) {\n    const classes = useStyles();\n    useUserRole({ roleList: ['ADMIN', 'TEACHER', 'STUDENT','SUPER_ADMIN'] });\n    const { loggedUserProfile } = useSelector((state) => state?.userProfile);\n    const dispatch = useDispatch();\n    const [value, setValue] = useState('');\n    const [openAddGrades, setOpenAddGrades] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const [addGradePopup, setAddGradePopup] = useState(false);\n    const [gradeId, setGradeId] = useState('');\n    const [isGradeUpdateData, setGradeUpdateData] = useState(null);\n    const { allGrades } = useSelector((state) => state?.grade);\n    const newData = allGrades;\n\n    const [confirmDialog, setConfirmDialog] = useState({\n        isOpen: false,\n        title: '',\n        subTitle: ''\n    });\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleUpdateGrade = (seq) => {\n        setAddGradePopup(true);\n        setGradeUpdateData(seq);\n    };\n\n    useEffect(() => {\n        dispatch(getAllGrade());\n    }, []);\n\n    // return (\n    //     <>\n    //         {/* <Grid item container xs={12} sm={12} md={9} lg={9} xl={9} className={classes.card}> */}\n    //         {active === 'ThirdCard' && (\n    //             <>\n    //                 {/* <Card className={classes.infoCard}> */}\n    //                 <MainCard>\n    //                     <div className={classes.titleContainer}>\n    //                         <SubjectIcon className={classes.viewIcon} />\n    //                         <span className={classes.pageTitle}>&nbsp; All Grades </span>\n    //                     </div>\n    //                     <Paper elevation={5} className={classes.root}>\n    //                         <Grid style={{ display: 'flex', justifyContent: 'space-between' }}>\n    //                             <div>\n    //                                 <OutlinedInput\n    //                                     className={classes.searchControl}\n    //                                     id=\"input-search-header\"\n    //                                     value={value}\n    //                                     onChange={(e) => setValue(e.target.value)}\n    //                                     placeholder=\"Search\"\n    //                                     startAdornment={\n    //                                         <InputAdornment position=\"start\">\n    //                                             <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n    //                                         </InputAdornment>\n    //                                     }\n    //                                 />\n    //                             </div>\n    //                             <div>\n    //                                 {loggedUserProfile.role === 'ADMIN' && (\n    //                                     <Button\n    //                                         variant=\"contained\"\n    //                                         onClick={() => {\n    //                                             setAddGradePopup(true);\n    //                                             setGradeUpdateData(null);\n    //                                         }}\n    //                                         className={classes.btnAdd}\n    //                                     >\n    //                                         Update Grade\n    //                                     </Button>\n    //                                 )}\n    //                             </div>\n    //                         </Grid>\n    //                         <TableContainer className={classes.tableContainer}>\n    //                             <Table className={classes.table} aria-label=\"simple table\">\n    //                                 <TableHead className={classes.tableHeaderCell}>\n    //                                     <StyledTableRow>\n    //                                         <TableCell align=\"center\"> Grade </TableCell>\n    //                                         <TableCell align=\"center\"> Description </TableCell>\n    //                                     </StyledTableRow>\n    //                                 </TableHead>\n    //                                 {!newData ? (\n    //                                     <caption style={{ textAlign: 'center' }}> Sorry! No data available</caption>\n    //                                 ) : (\n    //                                     <TableBody>\n    //                                         {newData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n    //                                             <StyledTableRow key={row.sequence}>\n    //                                                 <TableCell align=\"center\"> {row.grade} </TableCell>\n    //                                                 <TableCell align=\"center\"> {row.description} </TableCell>\n    //                                             </StyledTableRow>\n    //                                         ))}\n    //                                     </TableBody>\n    //                                 )}\n    //                             </Table>\n    //                         </TableContainer>\n    //                         <TablePagination\n    //                             rowsPerPageOptions={[10, 15, 25]}\n    //                             component=\"div\"\n    //                             count={newData?.length || 0}\n    //                             rowsPerPage={rowsPerPage}\n    //                             page={page}\n    //                             onPageChange={handleChangePage}\n    //                             onRowsPerPageChange={handleChangeRowsPerPage}\n    //                             sx={{\n    //                                 '.MuiTablePagination-displayedRows': {\n    //                                     marginBottom: 0\n    //                                 },\n    //                                 '.MuiTablePagination-selectLabel': {\n    //                                     marginBottom: 0\n    //                                 }\n    //                             }}\n    //                         />\n    //                     </Paper>\n\n    //                     {addGradePopup && (\n    //                         <AddGrades openAddGrades={addGradePopup} setOpenAddGrades={setAddGradePopup} id={gradeId} data={allGrades} />\n    //                     )}\n\n    //                     {confirmDialog && <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />}\n    //                 </MainCard>\n    //                 {/* </Card> */}\n    //             </>\n    //         )}\n    //         {/* </Grid>\n    //          */}\n    //     </>\n    // );\n\n    return (\n        <div>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; All Grades </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid container spacing={3} style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Grid item xs={12} sm={6} md={6}></Grid>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div className={classes.btn}>\n                                {(loggedUserProfile?.role === 'ADMIN' || loggedUserProfile?.role === 'SUPER_ADMIN') && (\n                                    <Button\n                                        variant=\"contained\"\n                                        onClick={() => {\n                                            setAddGradePopup(true);\n                                            setGradeUpdateData(null);\n                                        }}\n                                        className={classes.btnAdd}\n                                    >\n                                        Update Grade\n                                    </Button>\n                                )}\n                            </div>\n                        </Grid>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell align=\"center\"> Grade </TableCell>\n                                    <TableCell align=\"center\"> Description </TableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {!newData ? (\n                                <caption style={{ textAlign: 'center' }}> Sorry! No data available</caption>\n                            ) : (\n                                <TableBody>\n                                    {newData?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                                        <StyledTableRow key={row.sequence}>\n                                            <TableCell align=\"center\"> {row.grade} </TableCell>\n                                            <TableCell align=\"center\"> {row.description} </TableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[10, 15, 25]}\n                        component=\"div\"\n                        count={newData?.length || 0}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n\n                {addGradePopup && (\n                    <AddGrades openAddGrades={addGradePopup} setOpenAddGrades={setAddGradePopup} id={gradeId} data={allGrades} />\n                )}\n\n                {confirmDialog && <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />}\n            </MainCard>\n        </div>\n    );\n}\n"],"sourceRoot":""}