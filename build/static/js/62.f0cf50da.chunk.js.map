{"version":3,"sources":["views/schools/delivery-zones/view-delivery-zone/add-pincode/index.js","views/schools/delivery-zones/view-delivery-zone/index.js","store/actions/DeliveryActions/index.js"],"names":["validationSchema","yup","pincode","required","AddPincode","props","isOpen","setOpen","id","classes","useStyles","dispatch","useDispatch","methods","useForm","mode","resolver","yupResolver","defaultValues","reset","handleSubmit","handlePopupClose","_jsx","children","_jsxs","Dialog","open","paper","dialog","DialogTitle","className","dialogTitle","dialogTitleChild","Typography","style","fontSize","Link","to","onClick","CloseIcon","closeIcon","FormProvider","onSubmit","data","addPincode","getAllPincodes","DialogContent","Grid","container","item","xs","mandatory","RHFTextField","name","autoFocus","Divider","marginTop","DialogActions","dialogAction","Button","variant","color","buttonCancel","type","buttonSubmit","StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","ViewDeliveryZone","useUserRole","roleList","useParams","_useState","useState","_useState2","_slicedToArray","value","_useState3","_useState4","openAddDeliveryPlans","setOpenAddDeliveryPlans","_useState5","_useState6","page","setPage","_useState7","_useState8","rowsPerPage","setRowsPerPage","_useState9","title","subTitle","_useState10","confirmDialog","setConfirmDialog","newData","useSelector","state","delivery","allPincodes","useEffect","_Fragment","MainCard","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","display","justifyContent","btnAddDeliveryPlan","AddIcon","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","TableBody","slice","map","row","index","IconButton","onConfirm","deletePincode","_objectSpread","DeleteForeverIcon","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","sx","marginBottom","ConfirmDialog","getAllDeliveryZonesError","error","GET_ALL_DELIVERY_ZONE_ERROR","getAllPincodeError","GET_ALL_PINCODE_ZONE_ERROR","zoneId","successCB","http","process","concat","then","res","setMessage","message","catch","err","_err$data","console","log","addDeliveryZone","payload","updateDeliveryZone","deleteDeliveryZone","getAllDeliveryZones","arguments","undefined","searchData","GET_ALL_DELIVERY_ZONE_START","GET_ALL_DELIVERY_ZONE_SUCCESS","getAllDeliveryZonesSuccess","allDeliveryZones","GET_ALL_PINCODE_START","GET_ALL_PINCODE_SUCCESS","getAllPincodeSuccess"],"mappings":"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","file":"static/js/62.f0cf50da.chunk.js","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { FormProvider, RHFTextField } from '../../../../../components/hook-form';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useDispatch } from 'react-redux';\nimport { addPincode, getAllPincodes } from '../../../../../store/actions/DeliveryActions';\nimport * as yup from 'yup';\nimport useStyles from '../../../../DialogStyles';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography, Grid, Link, Divider } from '@material-ui/core';\n\nconst validationSchema = yup.object({\n    pincode: yup.string('Enter pincode here').required('Pincode is required')\n});\n\nexport default function AddPincode(props) {\n    const { isOpen, setOpen, id } = props;\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const initialValues = {\n        pincode: ''\n    };\n    const methods = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(validationSchema),\n        defaultValues: initialValues\n    });\n    const { reset, handleSubmit } = methods;\n\n    const handlePopupClose = () => {\n        setOpen(false);\n        reset();\n    };\n    const onSubmit = (data) => {\n        dispatch(\n            addPincode(data.pincode, id, () => {\n                dispatch(getAllPincodes(id));\n                handlePopupClose();\n            })\n        );\n    };\n\n    return (\n        <div>\n            <Dialog open={isOpen} classes={{ paper: classes.dialog }}>\n                <DialogTitle className={classes.dialogTitle}>\n                    <div className={classes.dialogTitleChild}>\n                        <Typography style={{ fontSize: '20px' }}> Add Pincode </Typography>\n                        <Link to=\"#\" onClick={handlePopupClose}>\n                            <CloseIcon className={classes.closeIcon} />\n                        </Link>\n                    </div>\n                </DialogTitle>\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n                    <DialogContent>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <label>\n                                    Pincode <span className={classes.mandatory}>*</span>\n                                </label>\n                                <RHFTextField name=\"pincode\" autoFocus />\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <Divider style={{ marginTop: 15 }} />\n                    <DialogActions className={classes.dialogAction}>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonCancel} onClick={handlePopupClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"contained\" type=\"submit\" className={classes.buttonSubmit}>\n                            Add\n                        </Button>\n                    </DialogActions>\n                </FormProvider>\n            </Dialog>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllPincodes, deletePincode } from '../../../../store/actions/DeliveryActions';\nimport MainCard from '../../../../ui-component/cards/MainCard';\nimport ConfirmDialog from '../../../../ui-component/ConfirmDialog/ConfirmDialog';\nimport { withStyles } from '@material-ui/styles';\nimport { IconSearch } from '@tabler/icons';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport AddPincode from './add-pincode';\nimport AddIcon from '@material-ui/icons/Add';\nimport { useHistory, useParams } from 'react-router-dom';\nimport useStyles from '../../../ViewTableStyles';\nimport {\n    Grid,\n    IconButton,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment\n} from '@material-ui/core';\nimport useUserRole from '../../../../hooks/useUserRole';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function ViewDeliveryZone() {\n    const classes = useStyles();\n    useUserRole({ roleList: ['ADMIN', 'SUPER_ADMIN'] });\n    const dispatch = useDispatch();\n    const { id } = useParams();\n    const [value, setValue] = useState('');\n    const [openAddDeliveryPlans, setOpenAddDeliveryPlans] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(25);\n    const [confirmDialog, setConfirmDialog] = useState({\n        isOpen: false,\n        title: '',\n        subTitle: ''\n    });\n    const { allPincodes } = useSelector((state) => state?.delivery);\n    const newData = allPincodes;\n\n    const handleDeletePincode = (pincode) => {\n        dispatch(\n            deletePincode(id, pincode, () => {\n                dispatch(getAllPincodes(id));\n            })\n        );\n        setConfirmDialog({\n            ...confirmDialog,\n            isOpen: false\n        });\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    useEffect(() => {\n        dispatch(getAllPincodes(id, rowsPerPage, value ? value : ''));\n    }, [rowsPerPage, value]);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; Delivery Zones Details </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <div>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    setOpenAddDeliveryPlans(true);\n                                }}\n                                className={classes.btnAddDeliveryPlan}\n                            >\n                                <AddIcon /> Pincode\n                            </Button>\n                        </div>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell> Pincodes </TableCell>\n                                    <TableCell align=\"right\"> Action </TableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {!newData ? (\n                                <caption style={{ textAlign: 'center' }}>Sorry! No data available</caption>\n                            ) : (\n                                <TableBody>\n                                    {newData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => (\n                                        <StyledTableRow key={index}>\n                                            <TableCell>{row}</TableCell>\n                                            <TableCell align=\"right\">\n                                                <IconButton\n                                                    onClick={() => {\n                                                        setConfirmDialog({\n                                                            isOpen: true,\n                                                            title: 'Delete Pincode',\n                                                            subTitle: 'Are you sure you want to delete this pincode?',\n                                                            onConfirm: () => {\n                                                                handleDeletePincode(row);\n                                                            }\n                                                        });\n                                                    }}\n                                                >\n                                                    <DeleteForeverIcon color=\"error\" style={{ cursor: 'pointer' }} />\n                                                </IconButton>\n                                            </TableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[25, 50, 100]}\n                        component=\"div\"\n                        count={newData?.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n                {openAddDeliveryPlans && <AddPincode isOpen={openAddDeliveryPlans} setOpen={setOpenAddDeliveryPlans} id={id} />}\n                {confirmDialog && <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />}\n            </MainCard>\n        </>\n    );\n}\n","import { http } from '../../../utils/http';\nimport { setMessage } from '../MessageActions';\nimport {\n    GET_DELIVERY_ZONE_START,\n    GET_DELIVERY_ZONE_SUCCESS,\n    GET_DELIVERY_ZONE_ERROR,\n    GET_ALL_DELIVERY_ZONE_START,\n    GET_ALL_DELIVERY_ZONE_SUCCESS,\n    GET_ALL_DELIVERY_ZONE_ERROR,\n    GET_ALL_PINCODE_START,\n    GET_ALL_PINCODE_SUCCESS,\n    GET_ALL_PINCODE_ZONE_ERROR\n} from '../../constants';\n\nconst getDeliveryZonesStart = () => {\n    return { type: GET_DELIVERY_ZONE_START };\n};\nconst getDeliveryZonesSuccess = (payload) => {\n    return { type: GET_DELIVERY_ZONE_SUCCESS, payload };\n};\nconst getDeliveryZonesError = (error) => {\n    return { type: GET_DELIVERY_ZONE_ERROR, error };\n};\n\nconst getAllDeliveryZonesStart = () => {\n    return { type: GET_ALL_DELIVERY_ZONE_START };\n};\nconst getAllDeliveryZonesSuccess = (payload) => {\n    return { type: GET_ALL_DELIVERY_ZONE_SUCCESS, payload };\n};\nconst getAllDeliveryZonesError = (error) => {\n    return { type: GET_ALL_DELIVERY_ZONE_ERROR, error };\n};\n\nconst getAllPincodeStart = () => {\n    return { type: GET_ALL_PINCODE_START };\n};\nconst getAllPincodeSuccess = (payload) => {\n    return { type: GET_ALL_PINCODE_SUCCESS, payload };\n};\nconst getAllPincodeError = (error) => {\n    return { type: GET_ALL_PINCODE_ZONE_ERROR, error };\n};\n\nconst addPincode = (pincode, zoneId, successCB) => (dispatch) => {\n    try {\n        http(\n            process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS,\n            'POST',\n            `subscriptions-service/delivery-zones/${zoneId}/pincodes/${pincode}`,\n            true\n        )\n            .then((res) => {\n                dispatch(setMessage(res?.message));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                dispatch(setMessage(err?.data?.message));\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst addDeliveryZone = (payload, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'POST', `subscriptions-service/delivery-zones`, payload, true)\n            .then((res) => {\n                dispatch(setMessage(res?.message));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst updateDeliveryZone = (payload, id, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'PUT', `subscriptions-service/delivery-zones/${id}`, payload, true)\n            .then((res) => {\n                if (res) {\n                    dispatch(setMessage(res?.message));\n                    successCB && successCB(res);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst deleteDeliveryZone = (id, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'DELETE', `subscriptions-service/delivery-zones/${id}`, true)\n            .then((res) => {\n                dispatch(setMessage('Delivery zone deleted successfully'));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst getDeliveryZone = (id) => (dispatch, getState) => {\n    dispatch(getDeliveryZonesStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'GET', `subscriptions-service/delivery-zones/${id}`, true)\n            .then((res) => {\n                const payload = {\n                    deliveryZone: res\n                };\n                dispatch(getDeliveryZonesSuccess(payload));\n            })\n            .catch((err) => {\n                dispatch(getDeliveryZonesError(err));\n                dispatch(setMessage(err?.message));\n            });\n    } catch (error) {\n        dispatch(getDeliveryZonesError('Something went wrong'));\n    }\n};\n\nconst getAllDeliveryZones =\n    (rowsPerPage = 10, searchData = '', page = '1') =>\n    (dispatch) => {\n        dispatch(getAllDeliveryZonesStart());\n        try {\n            http(\n                process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS,\n                'GET',\n                `subscriptions-service/delivery-zones?searchKey=${searchData}&pageNumber=${page}&pageSize=${rowsPerPage}`,\n                true\n            )\n                .then((res) => {\n                    const payload = {\n                        allDeliveryZones: res\n                    };\n                    dispatch(getAllDeliveryZonesSuccess(payload));\n                })\n                .catch((err) => {\n                    dispatch(getAllDeliveryZonesError(err));\n                    dispatch(setMessage(err?.message));\n                });\n        } catch (error) {\n            dispatch(getAllDeliveryZonesError('Something went wrong'));\n        }\n    };\nconst getAllPincodes =\n    (id, rowsPerPage = 10, searchData = '', page = '1') =>\n    (dispatch) => {\n        dispatch(getAllPincodeStart());\n        try {\n            http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'GET', `subscriptions-service/delivery-zones/${id}/pincodes`, true)\n                .then((res) => {\n                    const payload = {\n                        allPincodes: res\n                    };\n                    dispatch(getAllPincodeSuccess(payload));\n                })\n                .catch((err) => {\n                    dispatch(getAllPincodeError(err));\n                    dispatch(setMessage(err?.message));\n                });\n        } catch (error) {\n            dispatch(getAllPincodeError('Something went wrong'));\n        }\n    };\n\nconst deletePincode = (id, pincode, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS, 'DELETE', `subscriptions-service/delivery-zones/${id}/pincodes/${pincode}`, true)\n            .then((res) => {\n                dispatch(setMessage('Pincode deleted successfully'));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport {\n    addPincode,\n    addDeliveryZone,\n    updateDeliveryZone,\n    getDeliveryZone,\n    getAllDeliveryZones,\n    getAllPincodes,\n    deleteDeliveryZone,\n    deletePincode\n};\n"],"sourceRoot":""}