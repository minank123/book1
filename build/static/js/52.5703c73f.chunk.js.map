{"version":3,"sources":["services/OrdersService.js","views/orders/place-orders/index.js","store/actions/BulkActions/index.js","views/orders/update-order-status/index.js"],"names":["getUsersWithActiveLibrarySubscription","pageNo","rowsPerPage","searchKeyword","Promise","resolve","reject","http","process","concat","then","data","catch","err","StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","PlaceOrders","_allUsers$content","useUserRole","roleList","_useState","useState","_useState2","_slicedToArray","selected","_useState3","_useState4","loading","setLoading","classes","useStyles","history","useDispatch","useHistory","_useState5","_useState6","openStatusPopup","setOpenStatusPopup","_useState7","_useState8","page","setPage","_useState9","_useState10","setRowsPerPage","_useState11","_useState12","isPlanUpdateData","_useState13","useSelector","state","order","allOrderData","_useState14","openStatusPopupForBatch","setOpenPopupForBatch","_useState15","_useState16","numberOfElements","setNumberOfElements","_useState17","_useState18","allUsers","setAllUsers","_useState19","_useState20","searchKey","setSearchKey","GetUsersWithActiveLibrarySubscription","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pageSize","wrap","_context","prev","next","res","totalElements","error","console","log","finally","stop","_x","_x2","_x3","apply","arguments","useEffect","_jsx","_Fragment","children","_jsxs","MainCard","className","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","Grid","container","spacing","style","display","justifyContent","item","xs","sm","md","OutlinedInput","searchControl","id","onChange","e","_e$target","target","value","placeholder","startAdornment","InputAdornment","position","IconSearch","stroke","size","Button","variant","color","boxShadow","height","btn","onClick","progressContainer","colSpan","align","CircularProgress","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","content","TableBody","map","row","index","name","orderId","indexOf","profileId","email","mobile","fullName","schoolName","Tooltip","title","Link","to","subscriptionId","IconButton","push","VisibilityIcon","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","onPageChange","event","newPage","onRowsPerPageChange","sx","marginBottom","UpdateOrderStatus","isOpen","setOpen","isBulk","getBulkError","type","GET_BULK_ERROR","getAllBulkError","GET_ALL_BULK_ERROR","bulkReturnBook","payload","dispatch","setMessage","message","bulkUpdateOrders","successCB","getBulkProcess","GET_BULK_START","GET_BULK_SUCCESS","getBulkSuccess","bulkData","getAllBulkProcess","length","undefined","GET_ALL_BULK_START","GET_ALL_BULK_SUCCESS","getAllBulkSuccess","allBulkData","STATUS_ITEMS","status","validationSchema","yup","orderStatus","required","props","Date","toISOString","substring","startDate","endDate","methods","useForm","mode","resolver","yupResolver","defaultValues","reset","handleSubmit","handlePopupClose","Dialog","open","paper","dialog","DialogTitle","dialogTitle","dialogTitleChild","Typography","fontSize","CloseIcon","closeIcon","FormProvider","onSubmit","orderIds","getAllOrder","updateOrderStatus","DialogContent","mandatory","RHFSelect","label","Divider","marginTop","DialogActions","dialogAction","buttonCancel","buttonSubmit"],"mappings":"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","file":"static/js/52.5703c73f.chunk.js","sourcesContent":["import { http } from '../utils/http';\n\nexport const getUsersWithActiveLibrarySubscription = (pageNo, rowsPerPage, searchKeyword) => {\n    return new Promise((resolve, reject) => {\n        http(\n            process.env.REACT_APP_ROOT_URL_SUBSCRIPTIONS,\n            'GET',\n            `subscriptions-service/plan-subscriptions/active?pageNumber=${pageNo || 1}&pageSize=${rowsPerPage || 30}&searchKey=${\n                searchKeyword || ''\n            }`,\n            true\n        )\n            .then((data) => {\n                resolve(data);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n    });\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport { withStyles, useTheme } from '@material-ui/styles';\nimport {\n    Grid,\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Typography,\n    CircularProgress,\n    Tooltip,\n    Button\n} from '@material-ui/core';\nimport { IconSearch } from '@tabler/icons';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport UpdateOrderStatus from '../update-order-status';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport { Link, useHistory } from 'react-router-dom';\nimport useStyles from '../../ViewTableStyles';\nimport { userProfileSearch } from '../../../store/actions/AddUserActions';\nimport useUserRole from '../../../hooks/useUserRole';\nimport { getUsersWithActiveLibrarySubscription } from '../../../services/OrdersService';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function PlaceOrders() {\n    useUserRole({ roleList: ['ADMIN', 'SCHOOL_ADMIN','SUPER_ADMIN'] });\n\n    const [selected, setSelected] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const history = useHistory();\n\n    const [openStatusPopup, setOpenStatusPopup] = useState(false);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(25);\n    const [isPlanUpdateData, setPlanUpdateData] = useState(null);\n    const { allOrderData } = useSelector((state) => state?.order);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n    };\n\n    const handleViewOrder = (id) => {\n        history.push(`/admin/orders/delivery-plan/${id}`);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n    const [openStatusPopupForBatch, setOpenPopupForBatch] = useState(false);\n\n    const [numberOfElements, setNumberOfElements] = useState('');\n    const [allUsers, setAllUsers] = useState([]);\n    const [searchKey, setSearchKey] = useState('');\n\n    const GetUsersWithActiveLibrarySubscription = async (pageNo, pageSize, searchKeyword) => {\n        setLoading(true);\n        await getUsersWithActiveLibrarySubscription(pageNo, pageSize, searchKeyword)\n            .then((res) => {\n                setAllUsers(res);\n                setNumberOfElements(res?.totalElements);\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    useEffect(() => {\n        GetUsersWithActiveLibrarySubscription(page + 1, rowsPerPage, searchKey);\n    }, [page, rowsPerPage, searchKey]);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; All Users With Library Subscription </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid container spacing={3} style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div>\n                                <OutlinedInput\n                                    className={classes.searchControl}\n                                    id=\"input-search-header\"\n                                    onChange={(e) => setSearchKey(e?.target?.value)}\n                                    placeholder=\"Search\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\">\n                                            <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item xs={12} sm={2} md={2}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ boxShadow: '0 0.5em 0.5em 0.1em #68c2d9',height: '37px'}}\n                                className={classes.btn}\n                                onClick={(e) => setSearchKey('pending')}\n                            >\n                                Pending Weeks\n                            </Button>\n                        </Grid>\n                        <Grid item xs={12} sm={2} md={2}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ boxShadow: '0 0.5em 0.5em 0.1em #68c2d9',height: '37px'}}\n                                onClick={(e) => setSearchKey('active')}\n                            >\n                                Active Plans\n                            </Button>\n                        </Grid>\n                        <Grid item xs={12} sm={2} md={2}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ boxShadow: '0 0.5em 0.5em 0.1em #68c2d9',height: '37px' }}\n                                onClick={(e) => setSearchKey('completed')}\n                            >\n                                Completed Plans\n                            </Button>\n                        </Grid>\n                    </Grid>\n\n                    {loading ? ( \n                        <div className={classes.progressContainer} colSpan={9} align=\"center\">\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        <TableContainer className={classes.tableContainer}>\n                            <Table className={classes.table} aria-label=\"simple table\">\n                                <TableHead className={classes.tableHeaderCell}>\n                                    <StyledTableRow>\n                                        <TableCell> Cus ID </TableCell>\n                                        <TableCell> Email </TableCell>\n                                        <TableCell> Phone no </TableCell>\n                                        <TableCell> Full Name </TableCell>\n                                        <TableCell> School Name </TableCell>\n                                        <TableCell align=\"right\"> Actions </TableCell>\n                                    </StyledTableRow>\n                                </TableHead>\n                                {!allUsers?.content ? (\n                                    <caption style={{ textAlign: 'center' }}> Sorry! No data available </caption>\n                                ) : (\n                                    <TableBody>\n                                        {allUsers?.content?.map((row, index) => {\n                                            const isItemSelected = isSelected(row?.orderId);\n\n                                            const labelId = `enhanced-table-checkbox-${index}`;\n                                            return (\n                                                <StyledTableRow key={index}>\n                                                    <TableCell> {row?.profileId} </TableCell>\n                                                    <TableCell> {row?.email} </TableCell>\n                                                    <TableCell> {row?.mobile} </TableCell>\n                                                    <TableCell> {row?.fullName} </TableCell>\n                                                    <TableCell> {row?.schoolName} </TableCell>\n\n                                                    <TableCell align=\"right\">\n                                                        <Tooltip title=\"View Delivery Plan\" aria-label=\"View Order\">\n                                                            <Link to={`/admin/orders/delivery-plan/${row?.subscriptionId}`}>\n                                                                <IconButton onClick={() => handleViewOrder(row?.subscriptionId)}>\n                                                                    <VisibilityIcon color=\"primary\" style={{ cursor: 'pointer' }} />\n                                                                </IconButton>\n                                                            </Link>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </StyledTableRow>\n                                            );\n                                        })}\n                                    </TableBody>\n                                )}\n                            </Table>\n                        </TableContainer>\n                    )}\n\n                    <TablePagination\n                        rowsPerPageOptions={[25, 50, 100]}\n                        component=\"div\"\n                        count={numberOfElements || 0}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n                {openStatusPopup && (\n                    <UpdateOrderStatus isOpen={openStatusPopup} setOpen={setOpenStatusPopup} orderId={isPlanUpdateData} isBulk={false} />\n                )}\n                {openStatusPopupForBatch && (\n                    <UpdateOrderStatus isOpen={openStatusPopupForBatch} setOpen={setOpenPopupForBatch} orderId={selected} isBulk={true} />\n                )}\n            </MainCard>\n        </>\n    );\n}\n","import { http } from '../../../utils/http';\nimport { setMessage } from '../MessageActions';\nimport {\n    GET_ALL_BULK_START,\n    GET_ALL_BULK_SUCCESS,\n    GET_ALL_BULK_ERROR,\n    GET_BULK_START,\n    GET_BULK_SUCCESS,\n    GET_BULK_ERROR\n} from '../../constants';\n\nconst getBulkStart = () => {\n    return { type: GET_BULK_START };\n};\nconst getBulkSuccess = (payload) => {\n    return { type: GET_BULK_SUCCESS, payload };\n};\nconst getBulkError = (error) => {\n    return { type: GET_BULK_ERROR, error };\n};\n\nconst getAllBulkStart = () => {\n    return { type: GET_ALL_BULK_START };\n};\nconst getAllBulkSuccess = (payload) => {\n    return { type: GET_ALL_BULK_SUCCESS, payload };\n};\nconst getAllBulkError = (error) => {\n    return { type: GET_ALL_BULK_ERROR, error };\n};\n\nconst bulkPlaceOrder = (payload, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_ORDER, 'POST', 'orders-service/bulk/order', payload, true)\n            .then((res) => {\n                dispatch(setMessage(res?.message));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst bulkReturnBook = (payload) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_ORDER, 'POST', 'orders-service/bulk/book/return', payload, true)\n            .then((res) => {\n                dispatch(setMessage(res?.message));\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst bulkUpdateOrders = (payload, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_ORDER, 'PUT', 'orders-service/bulk/order/status', payload, true)\n            .then((res) => {\n                dispatch(setMessage(res?.message));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst getBulkProcess = (id) => (dispatch) => {\n    dispatch(getBulkStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_ORDER, 'GET', `orders-service/bulk/${id}`, true)\n            .then((res) => {\n                const payload = {\n                    bulkData: res\n                };\n                dispatch(getBulkSuccess(payload));\n            })\n            .catch((err) => {\n                dispatch(getBulkError(err));\n            });\n    } catch (error) {\n        dispatch(getBulkError('Something went wrong'));\n    }\n};\n\nconst getAllBulkProcess = (rowsPerPage = 10, page = 1) => (dispatch) => {\n    dispatch(getAllBulkStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_ORDER, 'GET', `orders-service/bulk?pageNumber=${page}&pageSize=${rowsPerPage}`, true)\n            .then((res) => {\n                const payload = {\n                    allBulkData: res\n                };\n                dispatch(getAllBulkSuccess(payload));\n            })\n            .catch((err) => {\n                dispatch(getAllBulkError(err));\n            });\n    } catch (error) {\n        dispatch(getAllBulkError('Something went wrong'));\n    }\n};\n\nexport { bulkPlaceOrder, bulkUpdateOrders, getBulkProcess, getAllBulkProcess, bulkReturnBook };\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useDispatch } from 'react-redux';\nimport useStyles from '../../DialogStyles';\nimport { updateOrderStatus, getAllOrder } from '../../../store/actions/OrderActions';\nimport { bulkUpdateOrders } from '../../../store/actions/BulkActions';\nimport { FormProvider, RHFSelect } from '../../../components/hook-form';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography, Grid, Link, Divider } from '@material-ui/core';\n\nconst STATUS_ITEMS = [\n    { id: 0, status: 'DELIVERED' },\n    { id: 1, status: 'CANCELLED' },\n    { id: 2, status: 'PARTIALLY_DELIVERED' }\n];\n\nconst validationSchema = yup.object({\n    orderStatus: yup.string().required('Order Status is required')\n});\n\nexport default function UpdateOrderStatus(props) {\n    const { isOpen, setOpen, orderId, isBulk } = props;\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [startDate, setStartDate] = useState(new Date().toISOString().substring(0, 10));\n    const [endDate, setEndDate] = useState(new Date().toISOString().substring(0, 10));\n\n    const initialValues = {\n        orderStatus: ''\n    };\n    const methods = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(validationSchema),\n        defaultValues: initialValues\n    });\n    const { reset, handleSubmit } = methods;\n\n    const handlePopupClose = () => {\n        setOpen(false);\n        reset();\n    };\n\n    const onSubmit = (data) => {\n        if (isBulk) {\n            const payload = { status: data?.orderStatus, orderIds: orderId };\n            dispatch(\n                bulkUpdateOrders(payload, () => {\n                    handlePopupClose();\n                    dispatch(getAllOrder('', startDate, endDate, () => {}));\n                })\n            );\n\n            handlePopupClose();\n        } else {\n            dispatch(\n                updateOrderStatus(orderId, data?.orderStatus, () => {\n                    dispatch(getAllOrder('', startDate, endDate, () => {}));\n                    handlePopupClose();\n                })\n            );\n        }\n    };\n\n    return (\n        <div>\n            <Dialog open={isOpen} classes={{ paper: classes.dialog }}>\n                <DialogTitle className={classes.dialogTitle}>\n                    <div className={classes.dialogTitleChild}>\n                        <Typography style={{ fontSize: '20px' }}>Update Order Status</Typography>\n                        <Link to=\"#\" onClick={handlePopupClose}>\n                            <CloseIcon className={classes.closeIcon} />\n                        </Link>\n                    </div>\n                </DialogTitle>\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n                    <DialogContent>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <label>\n                                    Status<span className={classes.mandatory}>*</span>\n                                </label>\n                                <RHFSelect name=\"orderStatus\" label=\"\">\n                                    <option value=\"\">Select Status</option>\n                                    {STATUS_ITEMS?.map((item, index) => (\n                                        <option key={index} value={item?.status}>\n                                            {item?.status}\n                                        </option>\n                                    ))}\n                                </RHFSelect>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <Divider style={{ marginTop: 15 }} />\n                    <DialogActions className={classes.dialogAction}>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonCancel} onClick={handlePopupClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"contained\" type=\"submit\" className={classes.buttonSubmit}>\n                            Update\n                        </Button>\n                    </DialogActions>\n                </FormProvider>\n            </Dialog>\n        </div>\n    );\n}\n"],"sourceRoot":""}