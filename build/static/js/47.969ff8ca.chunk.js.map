{"version":3,"sources":["views/books/books-languages/add-language/index.js","views/books/books-languages/index.js","ui-component/messages/ErrorMsg.js","store/actions/BookLanguageActions/index.js"],"names":["validationSchema","yup","name","required","trim","AddLanguages","props","openAddLanguages","setOpenAddLanguages","isError","setError","isEditData","classes","useStyles","_useState","useState","_useState2","_slicedToArray","isLoading","dispatch","useDispatch","initialValues","methods","useForm","mode","resolver","yupResolver","defaultValues","reset","handleSubmit","handlePopupClose","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","payload","wrap","_context","prev","next","updateBookLanguage","id","getAllBookLanguage","addBookLanguage","stop","_x","apply","arguments","_jsxs","children","Dialog","open","paper","dialog","_jsx","DialogTitle","className","dialogTitle","dialogTitleChild","Typography","style","fontSize","Link","to","onClick","CloseIcon","closeIcon","FormProvider","DialogContent","Grid","container","item","xs","mandatory","RHFTextField","placeholder","autoFocus","Divider","marginTop","DialogActions","dialogAction","Button","variant","color","buttonCancel","type","buttonSubmit","loader","CircularProgressLoader","ErrorMsg","message","StyledTableRow","withStyles","theme","root","backgroundColor","palette","action","hover","TableRow","BooksLanguages","useUserRole","roleList","_useState3","_useState4","page","setPage","_useState5","_useState6","rowsPerPage","setRowsPerPage","_useState7","isOpen","title","subTitle","_useState8","confirmDialog","setConfirmDialog","_useState9","_useState10","isBookLanguageUpdateData","setBookLanguageUpdateData","_useState11","_useState12","isSearch","setSearch","allLanguages","useSelector","state","language","newData","content","totalCount","totalElements","useEffect","_Fragment","MainCard","titleContainer","SubjectIcon","viewIcon","pageTitle","Paper","elevation","spacing","display","justifyContent","sm","md","OutlinedInput","searchControl","onChange","event","target","value","handleSearch","startAdornment","InputAdornment","position","IconSearch","stroke","size","btn","btnAdd","TableContainer","tableContainer","Table","table","TableHead","tableHeaderCell","TableCell","align","TableBody","map","row","Tooltip","IconButton","EditIcon","cursor","textAlign","TablePagination","rowsPerPageOptions","component","count","onPageChange","newPage","onRowsPerPageChange","sx","marginBottom","ConfirmDialog","useTheme","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","severity","background","error","dark","getAllBookLanguageStart","GET_ALL_LANGUAGE_START","getAllBookLanguageSuccess","GET_ALL_LANGUAGE_SUCCESS","getAllBookLanguageError","GET_ALL_LANGUAGE_ERROR","successCB","http","process","then","res","setMessage","catch","err","_err$data","_err$data2","console","log","concat","_err$data3","_err$data4","getBookLanguageList","getState","languagesList","length","undefined","searchData"],"mappings":"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","file":"static/js/47.969ff8ca.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { FormProvider, RHFTextField, RHFSelect } from '../../../../components/hook-form';\nimport { useDispatch } from 'react-redux';\nimport { addBookLanguage, updateBookLanguage, getAllBookLanguage } from '../../../../store/actions/BookLanguageActions';\nimport CircularProgressLoader from '../../../../ui-component/CircularProgressLoader';\nimport ErrorMsg from '../../../../ui-component/messages/ErrorMsg';\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography, Grid, TextField, Link, Divider } from '@material-ui/core';\n\nimport useStyles from '../../../DialogStyles';\n\nconst validationSchema = yup.object({\n    name: yup.string('Enter language here').required('Language is required').trim()\n});\n\nexport default function AddLanguages(props) {\n    const { openAddLanguages, setOpenAddLanguages, isError, setError, isEditData } = props;\n    const classes = useStyles();\n    const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch();\n\n    const initialValues = {\n        name: isEditData?.name || ''\n    };\n\n    const methods = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(validationSchema),\n        defaultValues: initialValues\n    });\n    const { reset, handleSubmit } = methods;\n\n    const handlePopupClose = () => {\n        setOpenAddLanguages(false);\n        reset();\n    };\n\n    const onSubmit = async (data) => {\n        const payload = {\n            name: data?.name\n        };\n        if (isEditData) {\n            dispatch(\n                updateBookLanguage(payload, isEditData?.id, () => {\n                    dispatch(getAllBookLanguage());\n                })\n            );\n            handlePopupClose();\n        } else {\n            dispatch(\n                addBookLanguage(payload, () => {\n                    dispatch(getAllBookLanguage());\n                })\n            );\n            handlePopupClose();\n        }\n    };\n\n    return (\n        <div>\n            <Dialog open={openAddLanguages} classes={{ paper: classes.dialog }}>\n                <DialogTitle className={classes.dialogTitle}>\n                    <div className={classes.dialogTitleChild}>\n                        <Typography style={{ fontSize: '20px' }}>{!isEditData ? 'Add Language' : 'Update Language'}</Typography>\n                        <Link to=\"#\" onClick={handlePopupClose}>\n                            <CloseIcon className={classes.closeIcon} />\n                        </Link>\n                    </div>\n                </DialogTitle>\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n                    <DialogContent>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <label>\n                                    Name <span className={classes.mandatory}>*</span>\n                                </label>\n                                <RHFTextField name=\"name\" placeholder=\"Name here\" autoFocus />\n                                <br /> <br />\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <Divider style={{ marginTop: 15 }} />\n                    <DialogActions className={classes.dialogAction}>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonCancel} onClick={handlePopupClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"contained\" type=\"submit\" className={classes.buttonSubmit}>\n                            {!isEditData ? 'Add' : 'Update'}\n                        </Button>\n                    </DialogActions>\n                </FormProvider>\n            </Dialog>\n            <span className={classes.loader}>{isLoading ? CircularProgressLoader() : ''}</span>\n\n            <ErrorMsg isError={isError} setError={setError} message={'Something went wrong !'} />\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport ConfirmDialog from '../../../ui-component/ConfirmDialog/ConfirmDialog';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllBookLanguage } from '../../../store/actions/BookLanguageActions';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Grid,\n    IconButton,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    TablePagination,\n    OutlinedInput,\n    InputAdornment,\n    Tooltip\n} from '@material-ui/core';\n\nimport { IconSearch } from '@tabler/icons';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport AddLanguages from './add-language';\nimport useStyles from '../../ViewTableStyles';\nimport useUserRole from '../../../hooks/useUserRole';\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover\n        }\n    }\n}))(TableRow);\n\nexport default function BooksLanguages() {\n    const classes = useStyles();\n    useUserRole({ roleList: ['ADMIN', 'SUPER_ADMIN'] });\n    const dispatch = useDispatch();\n\n    const [openAddLanguages, setOpenAddLanguages] = useState(false);\n    const [page, setPage] = useState(0);\n\n    const [rowsPerPage, setRowsPerPage] = useState(25);\n\n    const [confirmDialog, setConfirmDialog] = useState({\n        isOpen: false,\n        title: '',\n        subTitle: ''\n    });\n\n    const [isBookLanguageUpdateData, setBookLanguageUpdateData] = useState(null);\n    const [isSearch, setSearch] = useState('');\n\n    const { allLanguages } = useSelector((state) => state?.language);\n    const newData = allLanguages?.content;\n    const totalCount = allLanguages?.totalElements;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n    };\n    const handleBookLanguages = (id) => {\n        setOpenAddLanguages(true);\n        setBookLanguageUpdateData(id);\n    };\n\n    const handleSearch = (event) => {\n        setSearch(event.target.value);\n    };\n\n    useEffect(() => {\n        dispatch(getAllBookLanguage(rowsPerPage, isSearch ? isSearch : '', page + 1));\n    }, [rowsPerPage, isSearch, page]);\n\n    return (\n        <>\n            <MainCard>\n                <div className={classes.titleContainer}>\n                    <SubjectIcon className={classes.viewIcon} />\n                    <span className={classes.pageTitle}>&nbsp; All Languages </span>\n                </div>\n                <Paper elevation={5} className={classes.root}>\n                    <Grid container spacing={3} style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div>\n                                <OutlinedInput\n                                    className={classes.searchControl}\n                                    id=\"input-search-header\"\n                                    onChange={(event) => handleSearch(event)}\n                                    placeholder=\"Search\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\">\n                                            <IconSearch stroke={1.5} size=\"1rem\" className={classes.startAdornment} />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={6}>\n                            <div className={classes.btn}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        setOpenAddLanguages(true);\n                                        setBookLanguageUpdateData(null);\n                                    }}\n                                    className={classes.btnAdd}\n                                >\n                                    Add Languages\n                                </Button>\n                            </div>\n                        </Grid>\n                    </Grid>\n                    <TableContainer className={classes.tableContainer}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead className={classes.tableHeaderCell}>\n                                <StyledTableRow>\n                                    <TableCell> Name </TableCell>\n                                    <TableCell align=\"right\"> Action </TableCell>\n                                </StyledTableRow>\n                            </TableHead>\n                            {!allLanguages ? (\n                                <caption style={{ textAlign: 'center' }}>Sorry! No data available</caption>\n                            ) : (\n                                <TableBody>\n                                    {newData?.map((row) => (\n                                        <StyledTableRow key={row?.id}>\n                                            <TableCell>{row?.name}</TableCell>\n                                            <TableCell align=\"right\">\n                                                <Tooltip title=\"Update Language\">\n                                                    <IconButton onClick={() => handleBookLanguages(row)}>\n                                                        <EditIcon color=\"primary\" style={{ cursor: 'pointer' }} />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </TableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[25, 50, 100]}\n                        component=\"div\"\n                        count={totalCount}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                        sx={{\n                            '.MuiTablePagination-displayedRows': {\n                                marginBottom: 0\n                            },\n                            '.MuiTablePagination-selectLabel': {\n                                marginBottom: 0\n                            }\n                        }}\n                    />\n                </Paper>\n                {openAddLanguages && (\n                    <AddLanguages\n                        openAddLanguages={openAddLanguages}\n                        setOpenAddLanguages={setOpenAddLanguages}\n                        isEditData={isBookLanguageUpdateData}\n                    />\n                )}\n                {confirmDialog && <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />}\n            </MainCard>\n        </>\n    );\n}\n","import { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useTheme } from '@material-ui/styles';\n\nconst ErrorMsg = (props) => {\n    const { isError, setError, message } = props\n    const theme = useTheme();\n    return (\n\n        <Snackbar\n        anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n        }}\n            open={isError}\n            autoHideDuration={3000}\n            onClose={() => setError(false)}>\n            <Alert onClose={() => setError(false)}\n                severity=\"error\" style={{ background: theme.palette.error.dark, color: '#fff' }}>\n                {message}\n            </Alert>\n        </Snackbar>\n\n    );\n}\nexport default ErrorMsg;","import { http } from '../../../utils/http';\nimport { setMessage } from '../MessageActions';\nimport { GET_ALL_LANGUAGE_START, GET_ALL_LANGUAGE_SUCCESS, GET_ALL_LANGUAGE_ERROR } from '../../constants';\n\nconst getAllBookLanguageStart = () => {\n    return { type: GET_ALL_LANGUAGE_START };\n};\nconst getAllBookLanguageSuccess = (payload) => {\n    return { type: GET_ALL_LANGUAGE_SUCCESS, payload };\n};\nconst getAllBookLanguageError = (error) => {\n    return { type: GET_ALL_LANGUAGE_ERROR, error };\n};\n\nconst addBookLanguage = (payload, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BOOK, 'POST', `books-service/languages`, payload, true)\n            .then((res) => {\n                dispatch(setMessage(res?.message));\n                successCB && successCB(res);\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(setMessage(err?.data?.message ? err?.data?.message : 'Error!'));\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst updateBookLanguage = (payload, id, successCB) => (dispatch) => {\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BOOK, 'PUT', `books-service/languages/${id}`, payload, true)\n            .then((res) => {\n                if (res) {\n                    dispatch(setMessage(res?.message));\n                    successCB && successCB(res);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                dispatch(setMessage(err?.data?.message ? err?.data?.message : 'Error!'));\n            });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst getBookLanguageList = () => (dispatch, getState) => {\n    dispatch(getAllBookLanguageStart());\n    try {\n        http(process.env.REACT_APP_ROOT_URL_BOOK, 'GET', `books-service/languages`, true)\n            .then((res) => {\n                const payload = {\n                    languagesList: res\n                };\n                dispatch(getAllBookLanguageSuccess(payload));\n            })\n            .catch((err) => {\n                dispatch(getAllBookLanguageError(err));\n                dispatch(setMessage(err?.message));\n            });\n    } catch (error) {\n        dispatch(getAllBookLanguageError('Something went wrong'));\n    }\n};\n\nconst getAllBookLanguage =\n    (rowsPerPage = 10, searchData = '', page = 1) =>\n    (dispatch) => {\n        dispatch(getAllBookLanguageStart());\n        try {\n            http(\n                process.env.REACT_APP_ROOT_URL_BOOK,\n                'GET',\n                `books-service/languages?searchKey=${searchData}&pageNumber=${page}&pageSize=${rowsPerPage}`,\n                true\n            )\n                .then((res) => {\n                    const payload = {\n                        allLanguages: res\n                    };\n                    dispatch(getAllBookLanguageSuccess(payload));\n                })\n                .catch((err) => {\n                    dispatch(getAllBookLanguageError(err));\n                    dispatch(setMessage(err?.message));\n                });\n        } catch (error) {\n            dispatch(getAllBookLanguageError('Something went wrong'));\n        }\n    };\n\nexport { updateBookLanguage, getAllBookLanguage, addBookLanguage, getBookLanguageList };\n"],"sourceRoot":""}